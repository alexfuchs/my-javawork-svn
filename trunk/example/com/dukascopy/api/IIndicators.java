/*
 * Copyright 2009 DukascopyÂ® (Suisse) SA. All rights reserved.
 * DUKASCOPY PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */
package com.dukascopy.api;

import java.util.Collection;
import java.io.File;

import com.dukascopy.api.feed.IFeedDescriptor;
import com.dukascopy.api.indicators.IIndicator;

/**
 * Contains a set of functions to calculate indicator data
 *
 * @author Dmitry Shohov
 * 
 * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators>Strategy API: Indicators</a>
 */
public interface IIndicators {

    /**
     * Used to specify which price to use for indicator calculation
     * 
     * @author Dmitry Shohov
     */
    public enum AppliedPrice {
        /**
         * Close price
         */
        CLOSE("Close price"),
        /**
         * Open price
         */
        OPEN("Open price"),
        /**
         * High price
         */
        HIGH("High price"),
        /**
         * Low price
         */
        LOW("Low price"),
        /**
         * Median price (HL/2)
         */
        MEDIAN_PRICE("Median price (HL/2)"),
        /**
         * Typical price (HLC/3)
         */
        TYPICAL_PRICE("Typical price (HLC/3)"),
        /**
         * Weighted close price (HLCC/4)
         */
        WEIGHTED_CLOSE("Weighted close price (HLCC/4)"),
        /**
         * Date and time of bar
         */
        TIMESTAMP("Time"),
        /**
         * Volume of bar
         */
        VOLUME("Volume");
        
        private String text;
        
        private AppliedPrice(String text) {
            this.text = text;
        }
        
        @Override
        public String toString() {
            return text;
        }
    }
    
    /**
     * Types of Moving Average
     * 
     * @author Dmitry Shohov
     */
    public enum MaType {
        /**
         * Simple Moving Average
         */
        SMA,
        /**
         * Exponential Moving Average
         */
        EMA,
        /**
         * Weighted Moving Average
         */
        WMA,
        /**
         * Double Exponential Moving Average
         */
        DEMA,
        /**
         * Triple Exponential Moving Average
         */
        TEMA,
        /**
         * Triangular Moving Average
         */
        TRIMA,
        /**
         * Kaufman Adaptive Moving Average
         */
        KAMA,
        /**
         * MESA Adaptive Moving Average
         */
        MAMA,
        /**
         * T3 Moving Average
         */
        T3,
        /**
         * Hull Moving Average
         */
        HMA,
        /**
         * Linear Weighted Moving Average
         */
        LWMA,
        /**
         * Smoothed Moving Average
         */
        SMMA
    }
    
    /**
     * Returns a list of indicator groups
     * 
     * @return a list of indicator groups
     */
    public Collection<String> getGroups();
    
    /**
     * Returns indicator names that belong to the specified group
     * 
     * @param groupName indicator group
     * @return indicator names
     */
    public Collection<String> getNames(String groupName);
    
    /**
     * Returns a list of all indicator names
     * 
     * @return a list of all indicator names
     */
    public Collection<String> getAllNames();
    
    /**
     * Returns the indicator with the specified name
     * 
     * @param name name of the indicator
     * @return indicator
     */
    public IIndicator getIndicator(String name);

    /**
     * Attempts to open and register a custom indicator in the system. If operation is successful then the indicator will appear in
     * the list returned by the {@link #getAllNames()} method and can be called by {@link #calculateIndicator } functions
     *
     * @param compiledCustomIndcatorFile file with the compiled indicator (the one with .jfx extension)
     * @throws JFException when the indicator does not exist or can not be instantiated or does not pass the validation
     */
    public void registerCustomIndicator(File compiledCustomIndcatorFile) throws JFException;

    /**
	 * Register custom indicator by class
	 *
	 * @param indicatorClass - indicator class must implement {@link IIndicator} interface
	 * @throws JFException in case of any error
	 */
    public void registerCustomIndicator(Class<? extends IIndicator> indicatorClass) throws JFException;
    
    /**
     * Attempts to open and register a downloadable indicator in the system. If operation is successful then the indicator will appear in
     * the list returned by the {@link #getAllNames()} method and can be called by {@link #calculateIndicator } functions
     *
     * @param id indicator version identifier
     * @param name name of the indicator
     * @throws JFException when the given indicator version does not exist or can not be downloaded or can not be instantiated or does not pass the validation
     */
    public void registerDownloadableIndicator(String id, String name) throws JFException;

    /**
     * This is a universal function that allows getting values for any indicator available, including user indicators. 
     *     
     * @param instrument bar instrument
     * @param period bar period
     * @param side Bid or Ask side of the bar
     * @param functionName name of the indicator
     * @param inputTypes {@link IIndicators.AppliedPrice type} of the input data for every input that indicator requires or null if input is PRICE
     * @param optParams array of optional parameters consisting of Doubles and Integers
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return array of doubles or integers for every indicator output.
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>      
     * <p>
     * <b>Note:</b> 
     * type conversion may be used in order to work with the result of indicator calculation. For example,
     * <pre>
     * Object[] result = indicators.calculateIndicator(Instrument.EURUSD, 
     * 	Period.ONE_HOUR, new OfferSide[] {OfferSide.ASK}, "MINMAX",  
     * 	new AppliedPrice[]{AppliedPrice.CLOSE}, 
     * 	new Object[]{5}, 1);    
     * double min = (Double)(result[0]);
     * double max = (Double)(result[1]);
     * </pre> 
     */    
    public Object[] calculateIndicator(Instrument instrument, Period period, OfferSide[] side, String functionName, AppliedPrice[] inputTypes,
            Object[] optParams, int shift) throws JFException;
    
    /**
     * This is a universal function that allows getting values for any indicator available, including user indicators. 
     * 
     * @param instrument bar instrument
     * @param period bar period
     * @param side Bid or Ask side of the bars
     * @param functionName name of the function
     * @param inputTypes {@link IIndicators.AppliedPrice type} of the input data for every input that indicator requires or null if input is PRICE
     * @param optParams array of optional parameters consisting of Doubles and Integers
     * @param from start time of the first bar
     * @param to start time of the last bar that should be included in calculation
     * @return array of arrays of doubles or integers for every indicator output
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * <p>
     * <b>Note:</b> 
     * type conversion may be used in order to work with the result of indicator calculation. For example,
     * <pre>
     * long from = history.getBar(Instrument.EURUSD, Period.ONE_HOUR, OfferSide.ASK, 2).getTime(); 
	 * long to = history.getBar(Instrument.EURUSD, Period.ONE_HOUR, OfferSide.ASK, 1).getTime();
	 *	    
	 * Object[] result = indicators.calculateIndicator(Instrument.EURUSD, 
	 * 	Period.ONE_HOUR, new OfferSide[] {OfferSide.ASK}, "MINMAX", 
	 * 	new AppliedPrice[]{AppliedPrice.CLOSE}, new Object[]{5}, from, to);
	 *		
     * double minFrom = ((double[])result[0])[0];
     * double maxFrom = ((double[])result[1])[0];
     * double minTo = ((double[])result[0])[1];
     * double maxTo = ((double[])result[1])[1];
     * </pre> 
     */
    public Object[] calculateIndicator(Instrument instrument, Period period, OfferSide[] side, String functionName, AppliedPrice[] inputTypes,
            Object[] optParams, long from, long to) throws JFException;

    /**
     * This is a universal function that allows getting values for any indicator available, including user indicators.
     *
     * @param instrument instrument of the bars
     * @param period period of the bars
     * @param side Bid or Ask side of the bars
     * @param functionName name of the function
     * @param inputTypes {@link IIndicators.AppliedPrice type} of the input data for every input that indicator requires or null if input is PRICE
     * @param optParams array of optional parameters consisting of Doubles and Integers
     * @param filter {@link Filter filter} allows to filter candles
     * @param numberOfCandlesBefore how much candles to load before and including candle with time specified in <code>time</code> parameter
     * @param time time of the last candles in period specified in <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior first candle in period specified with <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (not including) candle with time specified in <code>time</code> parameter
     * @return array of arrays of doubles or integers for every indicator output
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a> 
     * <p>
     * <b>Note:</b> 
     * type conversion may be used in order to work with the result of indicator calculation. For example,
     * <pre>
     * long time = history.getBar(Instrument.EURUSD, Period.ONE_HOUR, OfferSide.ASK, 1).getTime(); 
     *		
     * Object[] result = indicators.calculateIndicator(Instrument.EURUSD, 
     * 	Period.ONE_HOUR, new OfferSide[] {OfferSide.ASK}, "MINMAX", 
     * 	new AppliedPrice[]{AppliedPrice.CLOSE}, new Object[]{5}, Filter.ALL_FLATS, 2, time, 0);
     *		 
	 * double minFrom = ((double[])result[0])[0];
	 * double maxFrom = ((double[])result[1])[0];
	 * double minTo = ((double[])result[0])[1];
	 * double maxTo = ((double[])result[1])[1];
     * </pre>  
     */
    public Object[] calculateIndicator(Instrument instrument, Period period, OfferSide[] side, String functionName, AppliedPrice[] inputTypes,
            Object[] optParams, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;

    /**
     * This is a universal function that allows getting values for any indicator available based on any {@link DataType} supported by JForex, including user indicators. 
     * 
     * @param feedDescriptor feed descriptor {@link IFeedDescriptor} which will be used to calculate indicator 
     * @param offerSides bid or ask side of the bars
     * @param functionName name of the function
     * @param inputTypes {@link IIndicators.AppliedPrice type} of the input data for every input that indicator requires or null if input is PRICE
     * @param optParams array of optional parameters consisting of Doubles and Integers
     * @param from start time of the first bar
     * @param to start time of the last bar that should be included in calculation
     * @return array of arrays of doubles, integers or objects for every indicator output
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * <p>
     * <b>Note:</b> 
     * type conversion may be used in order to work with the result of indicator calculation. For example,
     * <pre>
     * FeedDescriptor feedDescriptor = new FeedDescriptor();
     * 		
     * feedDescriptor.setDataType(DataType.TIME_PERIOD_AGGREGATION);		
     * feedDescriptor.setFilter(Filter.NO_FILTER);
     * feedDescriptor.setInstrument(Instrument.EURUSD);
     * feedDescriptor.setPeriod(Period.ONE_HOUR);
     * 		
     * long timeFrom = history.getBar(Instrument.EURUSD, Period.ONE_HOUR, OfferSide.ASK, 2).getTime(); 
	 * long timeTo = history.getBar(Instrument.EURUSD, Period.ONE_HOUR, OfferSide.ASK, 1).getTime();
	 * 		
	 * Object[] result = indicators.calculateIndicator(feedDescriptor, 
	 * new OfferSide[] {OfferSide.ASK}, "MINMAX", 
	 * new AppliedPrice[]{AppliedPrice.CLOSE}, new Object[]{5}, timeFrom, timeTo);
	 * 			 
     * double minFrom = ((double[])result[0])[0];
     * double maxFrom = ((double[])result[1])[0];
     * double minTo = ((double[])result[0])[1];
     * double maxTo = ((double[])result[1])[1];
     * </pre>  
     */
    public Object[] calculateIndicator(IFeedDescriptor feedDescriptor, OfferSide[] offerSides, String functionName,
    		AppliedPrice[] inputTypes, Object[] optParams, long from, long to) throws JFException;
    
    /**
     * This is a universal function that allows getting values for any indicator available based on any {@link DataType} supported by JForex, including user indicators. 
     * 
     * @param feedDescriptor feed descriptor {@link IFeedDescriptor} which will be used to calculate indicator 
     * @param offerSides bid or ask side of the bar
     * @param functionName name of the function
     * @param inputTypes {@link IIndicators.AppliedPrice type} of the input data for every input that indicator requires or null if input is PRICE
     * @param optParams array of optional parameters consisting of Doubles and Integers
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return array of arrays of doubles, integers or objects for every indicator output
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * <p>
     * <b>Note:</b> 
     * type conversion may be used in order to work with the result of indicator calculation. For example,
     * <pre>
     * FeedDescriptor feedDescriptor = new FeedDescriptor();
     * 		
     * feedDescriptor.setDataType(DataType.TIME_PERIOD_AGGREGATION);		
     * feedDescriptor.setFilter(Filter.NO_FILTER);
     * feedDescriptor.setInstrument(Instrument.EURUSD);
     * feedDescriptor.setPeriod(Period.ONE_HOUR);
     * 		
     * Object[] result = indicators.calculateIndicator(feedDescriptor, 
     * new OfferSide[] {OfferSide.ASK}, "MINMAX", 
     * new AppliedPrice[]{AppliedPrice.CLOSE}, new Object[]{5}, 1);    
     * 
     * double min = (Double)(result[0]);
     * double max = (Double)(result[1]);		
     * </pre>  
     */
    public Object[] calculateIndicator(IFeedDescriptor feedDescriptor, OfferSide[] offerSides, String functionName,
    		AppliedPrice[] inputTypes, Object[] optParams, int shift) throws JFException;

    /**
     * This is a universal function that allows getting values for any indicator available based on any {@link DataType} supported by JForex, including user indicators.
     * 
     * @param feedDescriptor feed descriptor {@link IFeedDescriptor} which will be used to calculate indicator 
     * @param offerSides bid or ask side of the bar
     * @param functionName name of the function
     * @param inputTypes {@link IIndicators.AppliedPrice type} of the input data for every input that indicator requires or null if input is PRICE
     * @param optParams array of optional parameters consisting of Doubles and Integers
     * @param numberOfBarsBefore how much candles to load before and including bar with time specified in <code>time</code> parameter
     * @param time of the last bar in period specified in <code>numberOfBarsBefore</code> parameter or/and
     *        time of the bar prior to the first bar in period specified with <code>numberOfBarsAfter</code> parameter
     * @param numberOfBarsAfter how much bars to load after (not including) bar with time specified in <code>time</code> parameter
     * @return array of arrays of doubles, integers or objects for every indicator output
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * <p>
     * <b>Note:</b> 
     * type conversion may be used in order to work with the result of indicator calculation. For example,
     * <pre>
     * FeedDescriptor feedDescriptor = new FeedDescriptor();
     * 		
     * feedDescriptor.setDataType(DataType.TIME_PERIOD_AGGREGATION);		
     * feedDescriptor.setFilter(Filter.NO_FILTER);
     * feedDescriptor.setInstrument(Instrument.EURUSD);
     * feedDescriptor.setPeriod(Period.ONE_HOUR);
     * 		
     * long time = history.getBar(Instrument.EURUSD, Period.ONE_HOUR, OfferSide.ASK, 1).getTime(); 
     * 		
     * Object[] result = indicators.calculateIndicator(feedDescriptor, 
     * new OfferSide[] {OfferSide.ASK}, "MINMAX", 
     * new AppliedPrice[]{AppliedPrice.CLOSE}, new Object[]{5}, 2, time, 0);		 
     * 
     * double minFrom = ((double[])result[0])[0];
     * double maxFrom = ((double[])result[1])[0];
     * double minTo = ((double[])result[0])[1];
     * double maxTo = ((double[])result[1])[1];		
     * </pre>   
     */
    public Object[] calculateIndicator(IFeedDescriptor feedDescriptor, OfferSide[] offerSides, String functionName,
    		AppliedPrice[] inputTypes, Object[] optParams, int numberOfBarsBefore, long time, int numberOfBarsAfter) throws JFException;

    /**
     * This is a universal function that allows to get values for any indicator available including user indicators. 
     * 
     * @param instrument instrument of the bars
     * @param period period of the bars 
     * @param offerSides bid or ask side of the bars
     * @param functionName name of the function
     * @param inputTypes {@link IIndicators.AppliedPrice type} of the input data for every input that indicator requires or null if input is PRICE
     * @param filter {@link Filter filter} allows to filter candles
     * @param optParams array of optional parameters consisting of Doubles and Integers
     * @param from start time of the first bar that should be included in calculation
     * @param to start time of the last bar that should be included in calculation
     * @return array of arrays of doubles, integers or objects for every indicator output
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * <p>
     * <b>Note:</b> 
     * type conversion may be used in order to work with the result of indicator calculation. For example,
     * <pre>
     * long timeFrom = history.getBar(Instrument.EURUSD, Period.ONE_HOUR, OfferSide.ASK, 2).getTime(); 
	 * long timeTo = history.getBar(Instrument.EURUSD, Period.ONE_HOUR, OfferSide.ASK, 1).getTime();
	 * 	    
	 * Object[] result = indicators.calculateIndicator(Instrument.EURUSD, 
	 *  	Period.ONE_HOUR, new OfferSide[] {OfferSide.ASK}, "MINMAX", 
	 *  	new AppliedPrice[]{AppliedPrice.CLOSE}, new Object[]{5}, Filter.ALL_FLATS, timeFrom, timeTo);
     *		 
     * double minFrom = ((double[])result[0])[0];
     * double maxFrom = ((double[])result[1])[0];
     * double minTo = ((double[])result[0])[1];
     * double maxTo = ((double[])result[1])[1];
     */
    public Object[] calculateIndicator(Instrument instrument, Period period, OfferSide[] offerSides, String functionName,
    		AppliedPrice[] inputTypes, Object[] optParams, Filter filter, long from, long to) throws JFException;
    /**
     * Calculates the Vector Trigonometric ACos for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument bar instrument
     * @param period bar period
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double acos(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int shift) throws JFException;

    /**
     * Calculates the Vector Trigonometric ACos for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     *      
     * @param instrument bar instrument
     * @param period bar period
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] acos(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, long from, long to) throws JFException;

    /**
     * Calculates the Vector Trigonometric ACos for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument bar instrument
     * @param period bar period
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] acos(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Vector Trigonometric ACos for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     *      
     * @param instrument bar instrument
     * @param period bar period
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter} 
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] acos(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, long from, long to) throws JFException;
    
    /**
     * Calculates the Accelerator/Decelerator Oscillator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument bar instrument
     * @param period bar period
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param fastPeriod fast period
     * @param slowPeriod slow period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] ac(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int fastPeriod, int slowPeriod, int shift) throws JFException;
    
    /**
     * Calculates the Accelerator/Decelerator Oscillator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. The resulting array for ticks is an array of values for 1 second bars.
     *     
     * @param instrument bar instrument
     * @param period bar period
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param fastPeriod fast period
     * @param slowPeriod slow period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] ac(Instrument instrument, Period period, OfferSide side,  AppliedPrice appliedPrice, int fastPeriod, int slowPeriod,  long from, long to) throws JFException;
    
    /**
     * Calculates the Accelerator/Decelerator Oscillator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument bar instrument
     * @param period bar period
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param fastPeriod fast period
     * @param slowPeriod slow period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] ac(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int fastPeriod, int slowPeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;

    /**
     * Calculates the Accelerator/Decelerator Oscillator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. The resulting array for ticks is an array of values for 1 second bars.
     *
     * @param instrument bar instrument
     * @param period bar period
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param fastPeriod fast period
     * @param slowPeriod slow period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] ac(Instrument instrument, Period period, OfferSide side,  AppliedPrice appliedPrice, int fastPeriod, int slowPeriod,  Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Chaikin A/D Line for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double ad(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Chaikin A/D Line for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] ad(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Chaikin A/D Line for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] ad(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Chaikin A/D Line for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] ad(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Vector Arithmetic Add for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side1 Bid or Ask side of the bar for the first input parameter
     * @param appliedPrice1 {@link IIndicators.AppliedPrice type} of input data for the first input parameter
     * @param side2 Bid or Ask side of the bar for the second input parameter
     * @param appliedPrice2 {@link IIndicators.AppliedPrice type} of input data for the second input parameter
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double add(Instrument instrument, Period period, OfferSide side1, AppliedPrice appliedPrice1, OfferSide side2, AppliedPrice appliedPrice2, int shift) throws JFException;

    /**
     * Calculates the Vector Arithmetic Add for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
	 * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side1 Bid or Ask side of the bar for the first input parameter
     * @param appliedPrice1 {@link IIndicators.AppliedPrice type} of input data for the first input parameter
     * @param side2 Bid or Ask side of the bar for the second input parameter
     * @param appliedPrice2 {@link IIndicators.AppliedPrice type} of input data for the second input parameter
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] add(Instrument instrument, Period period, OfferSide side1, AppliedPrice appliedPrice1, OfferSide side2, AppliedPrice appliedPrice2, long from, long to) throws JFException;

    /**
     * Calculates the Vector Arithmetic Add for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     ** @param instrument instrument of the bar
     * @param period period of the bar
     * @param side1 Bid or Ask side of the bar for the first input parameter
     * @param appliedPrice1 {@link IIndicators.AppliedPrice type} of input data for the first input parameter
     * @param side2 Bid or Ask side of the bar for the second input parameter
     * @param appliedPrice2 {@link IIndicators.AppliedPrice type} of input data for the second input parameter
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] add(Instrument instrument, Period period, OfferSide side1, AppliedPrice appliedPrice1, OfferSide side2, AppliedPrice appliedPrice2, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Vector Arithmetic Add for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side1 Bid or Ask side of the bar for the first input parameter
     * @param appliedPrice1 {@link IIndicators.AppliedPrice type} of input data for the first input parameter
     * @param side2 Bid or Ask side of the bar for the second input parameter
     * @param appliedPrice2 {@link IIndicators.AppliedPrice type} of input data for the second input parameter
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] add(Instrument instrument, Period period, OfferSide side1, AppliedPrice appliedPrice1, OfferSide side2, AppliedPrice appliedPrice2, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Chaikin A/D Oscillator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param fastPeriod fast period value
     * @param slowPeriod slow period value
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double adOsc(Instrument instrument, Period period, OfferSide side, int fastPeriod, int slowPeriod, int shift) throws JFException;

    /**
     * Calculates the Chaikin A/D Oscillator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param fastPeriod fast period value
     * @param slowPeriod slow period value
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] adOsc(Instrument instrument, Period period, OfferSide side, int fastPeriod, int slowPeriod, long from, long to) throws JFException;

    /**
     * Calculates the Chaikin A/D Oscillator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param fastPeriod fast period value
     * @param slowPeriod slow period value
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] adOsc(Instrument instrument, Period period, OfferSide side, int fastPeriod, int slowPeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Chaikin A/D Oscillator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param fastPeriod fast period value
     * @param slowPeriod slow period value
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] adOsc(Instrument instrument, Period period, OfferSide side, int fastPeriod, int slowPeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Average Directional Movement Index for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period value
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double adx(Instrument instrument, Period period, OfferSide side, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Average Directional Movement Index for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period value
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] adx(Instrument instrument, Period period, OfferSide side, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Average Directional Movement Index for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period value
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] adx(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Average Directional Movement Index for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period value
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] adx(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Average Directional Movement Index Rating for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period value
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double adxr(Instrument instrument, Period period, OfferSide side, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Average Directional Movement Index Rating for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period value
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] adxr(Instrument instrument, Period period, OfferSide side, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Average Directional Movement Index Rating for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period value
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] adxr(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Average Directional Movement Index Rating for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period value
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] adxr(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Alligator indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param jawTimePeriod jaw time period
     * @param teethTimePeriod teeth time period
     * @param lipsTimePeriod lips time period
     * @param timePeriod time period value
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Alligator>Alligator indicator</a>
     */    
    public double[] alligator(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int jawTimePeriod, int teethTimePeriod, int lipsTimePeriod, int shift) throws JFException;

    /**
     * Calculates the Alligator indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param jawTimePeriod jaw time period
     * @param teethTimePeriod teeth time period
     * @param lipsTimePeriod lips time period
     * @param timePeriod time period value
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Alligator>Alligator indicator</a>
     */
    public double[][] alligator(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int jawTimePeriod, int teethTimePeriod, int lipsTimePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Alligator indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param jawTimePeriod jaw time period
     * @param teethTimePeriod teeth time period
     * @param lipsTimePeriod lips time period
     * @param timePeriod time period value
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Alligator>Alligator indicator</a>
     */
    public double[][] alligator(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int jawTimePeriod, int teethTimePeriod, int lipsTimePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Alligator indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param jawTimePeriod jaw time period
     * @param teethTimePeriod teeth time period
     * @param lipsTimePeriod lips time period
     * @param timePeriod time period value
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Alligator>Alligator indicator</a>
     */
    public double[][] alligator(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int jawTimePeriod, int teethTimePeriod, int lipsTimePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Absolute Price Oscillator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param fastPeriod fast period value
     * @param slowPeriod slow period value
     * @param maType moving average type
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double apo(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int fastPeriod, int slowPeriod, MaType maType, int shift) throws JFException;

    /**
     * Calculates the Absolute Price Oscillator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param fastPeriod fast period value
     * @param slowPeriod slow period value
     * @param maType moving average type
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] apo(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int fastPeriod, int slowPeriod, MaType maType, long from, long to) throws JFException;

    /**
     * Calculates the Absolute Price Oscillator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param fastPeriod fast period value
     * @param slowPeriod slow period value
     * @param maType moving average type
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] apo(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int fastPeriod, int slowPeriod, MaType maType, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Absolute Price Oscillator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param fastPeriod fast period value
     * @param slowPeriod slow period value
     * @param maType moving average type
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] apo(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int fastPeriod, int slowPeriod, MaType maType, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Aroon indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period value
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] aroon(Instrument instrument, Period period, OfferSide side, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Aroon indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period value
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] aroon(Instrument instrument, Period period, OfferSide side, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Aroon indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period value
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] aroon(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Aroon indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period value
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] aroon(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Aroon Oscillator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period value
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double aroonOsc(Instrument instrument, Period period, OfferSide side, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Aroon Oscillator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period value
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] aroonOsc(Instrument instrument, Period period, OfferSide side, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Aroon Oscillator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period value
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] aroonOsc(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Aroon Oscillator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period value
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] aroonOsc(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Vector Trigonometric ASin for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double asin(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int shift) throws JFException;

    /**
     * Calculates the Vector Trigonometric ASin for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] asin(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, long from, long to) throws JFException;

    /**
     * Calculates the Vector Trigonometric ASin for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] asin(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Vector Trigonometric ASin for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] asin(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Vector Trigonometric ATan for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double atan(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int shift) throws JFException;

    /**
     * Calculates the Vector Trigonometric ATan for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] atan(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, long from, long to) throws JFException;

    /**
     * Calculates the Vector Trigonometric ATan for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] atan(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Vector Trigonometric ATan for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] atan(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Average True Range for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period value
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double atr(Instrument instrument, Period period, OfferSide side, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Average True Range for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period value
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] atr(Instrument instrument, Period period, OfferSide side, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Average True Range for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period value
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] atr(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;

    /**
     * Calculates the Average True Range for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period value
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] atr(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, long from, long to) throws JFException;
    
    /**
     * Calculates the Average Price for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Average_Price>Average Price</a>
     */
    public double avgPrice(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Average Price for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Average_Price>Average Price</a>
     */
    public double[] avgPrice(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Average Price for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Average_Price>Average Price</a>
     */
    public double[] avgPrice(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Average Price for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.s
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Average_Price>Average Price</a>
     */
    public double[] avgPrice(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Awesome Oscillator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param fasterMaTimePeriod faster moving average time period
     * @param fasterMaType faster moving average {@link IIndicators.MaType type}
     * @param slowerMaTimePeriod slower moving average time period
     * @param slowerMaType slower moving average {@link IIndicators.MaType type} 
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Awesome>Awesome Oscillator</a>
     */
    public double[] awesome(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int fasterMaTimePeriod, MaType fasterMaType, int slowerMaTimePeriod, MaType slowerMaType, int shift) throws JFException;

    /**
     * Calculates the Awesome Oscillator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param fasterMaTimePeriod faster moving average time period
     * @param fasterMaType faster moving average {@link IIndicators.MaType type}
     * @param slowerMaTimePeriod slower moving average time period
     * @param slowerMaType slower moving average {@link IIndicators.MaType type}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Awesome>Awesome Oscillator</a>
     */
    public double[][] awesome(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int fasterMaTimePeriod, MaType fasterMaType, int slowerMaTimePeriod, MaType slowerMaType, long from, long to) throws JFException;

    /**
     * Calculates the Awesome Oscillator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param fasterMaTimePeriod faster moving average time period
     * @param fasterMaType faster moving average {@link IIndicators.MaType type}
     * @param slowerMaTimePeriod slower moving average time period
     * @param slowerMaType slower moving average {@link IIndicators.MaType type}
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Awesome>Awesome Oscillator</a>
     */
    public double[][] awesome(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int fasterMaTimePeriod, MaType fasterMaType, int slowerMaTimePeriod, MaType slowerMaType, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Awesome Oscillator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param fasterMaTimePeriod faster moving average time period
     * @param fasterMaType faster moving average {@link IIndicators.MaType type}
     * @param slowerMaTimePeriod slower moving average time period
     * @param slowerMaType slower moving average {@link IIndicators.MaType type}
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Awesome>Awesome Oscillator</a>
     */
    public double[][] awesome(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int fasterMaTimePeriod, MaType fasterMaType, int slowerMaTimePeriod, MaType slowerMaType, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Bollinger Bands indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param nbDevUp number of standard deviations up
     * @param nbDevDn number of standard deviations down
     * @param maType {@link IIndicators.MaType type} of moving average
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Bollinger_Bands>Bollinger Bands indicator</a>
     */
    public double[] bbands(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, double nbDevUp, double nbDevDn, MaType maType, int shift) throws JFException;

    /**
     * Calculates the Bollinger Bands indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param nbDevUp number of standard deviations up
     * @param nbDevDn number of standard deviations down
     * @param maType {@link IIndicators.MaType type} of moving average
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Bollinger_Bands>Bollinger Bands indicator</a>
     */
    public double[][] bbands(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, double nbDevUp, double nbDevDn, MaType maType, long from, long to) throws JFException;

    /**
     * Calculates the Bollinger Bands indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param nbDevUp number of standard deviations up
     * @param nbDevDn number of standard deviations down
     * @param maType {@link IIndicators.MaType type} of moving average
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Bollinger_Bands>Bollinger Bands indicator</a>
     */
    public double[][] bbands(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, double nbDevUp, double nbDevDn, MaType maType, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Bollinger Bands indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param nbDevUp number of standard deviations up
     * @param nbDevDn number of standard deviations down
     * @param maType {@link IIndicators.MaType type} of moving average
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Bollinger_Bands>Bollinger Bands indicator</a>
     */
    public double[][] bbands(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, double nbDevUp, double nbDevDn, MaType maType, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Beta indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side1 Bid or Ask side of the bar for the first input parameter
     * @param appliedPrice1 {@link IIndicators.AppliedPrice type} of input data for the first input parameter
     * @param side2 Bid or Ask side of the bar for the second input parameter
     * @param appliedPrice2 {@link IIndicators.AppliedPrice type} of input data for the second input parameter
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Beta>Beta indicator</a>
     */
    public double beta(Instrument instrument, Period period, OfferSide side1, AppliedPrice appliedPrice1, OfferSide side2, AppliedPrice appliedPrice2, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Beta indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side1 Bid or Ask side of the bar for the first input parameter
     * @param appliedPrice1 {@link IIndicators.AppliedPrice type} of input data for the first input parameter
     * @param side2 Bid or Ask side of the bar for the second input parameter
     * @param appliedPrice2 {@link IIndicators.AppliedPrice type} of input data for the second input parameter
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Beta>Beta indicator</a>
     */
    public double[] beta(Instrument instrument, Period period, OfferSide side1, AppliedPrice appliedPrice1, OfferSide side2, AppliedPrice appliedPrice2, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Beta indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side1 Bid or Ask side of the bar for the first input parameter
     * @param appliedPrice1 {@link IIndicators.AppliedPrice type} of input data for the first input parameter
     * @param side2 Bid or Ask side of the bar for the second input parameter
     * @param appliedPrice2 {@link IIndicators.AppliedPrice type} of input data for the second input parameter
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Beta>Beta indicator</a>
     */
    public double[] beta(Instrument instrument, Period period, OfferSide side1, AppliedPrice appliedPrice1, OfferSide side2, AppliedPrice appliedPrice2, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Beta indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side1 Bid or Ask side of the bar for the first input parameter
     * @param appliedPrice1 {@link IIndicators.AppliedPrice type} of input data for the first input parameter
     * @param side2 Bid or Ask side of the bar for the second input parameter
     * @param appliedPrice2 {@link IIndicators.AppliedPrice type} of input data for the second input parameter
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Beta>Beta indicator</a>
     */
    public double[] beta(Instrument instrument, Period period, OfferSide side1, AppliedPrice appliedPrice1, OfferSide side2, AppliedPrice appliedPrice2, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Bear Power indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double bear(Instrument instrument, Period period, OfferSide side, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Bear Power indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] bear(Instrument instrument, Period period, OfferSide side, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Bear Power indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] bear(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Bear Power indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] bear(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Bull Power indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double bull(Instrument instrument, Period period, OfferSide side, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Bull Power indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] bull(Instrument instrument, Period period, OfferSide side, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Bull Power indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] bull(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Bull Power indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] bull(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Butterworth Filter indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Butterworth>Butterworth Filter indicator</a>
     */
    public double  butterworthFilter(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Butterworth Filter indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Butterworth>Butterworth Filter indicator</a>
     */
    public double[] butterworthFilter(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Butterworth Filter indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Butterworth>Butterworth Filter indicator</a>
     */
    public double[] butterworthFilter(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Butterworth Filter indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Butterworth>Butterworth Filter indicator</a>
     */
    public double[] butterworthFilter(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, long from, long to) throws JFException;
    
    /**
     * Calculates the Market Facilitation Index for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Market_Facilitation_Index>Market Facilitation Index</a>
     */    
    public double[] bwmfi(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Market Facilitation Index for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Market_Facilitation_Index>Market Facilitation Index</a>
     */
    public double[][] bwmfi(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Market Facilitation Index for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Market_Facilitation_Index>Market Facilitation Index</a>
     */
    public double[][] bwmfi(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Market Facilitation Index for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Market_Facilitation_Index>Market Facilitation Index</a>
     */
    public double[][] bwmfi(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Balance Of Power indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double bop(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Balance Of Power indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] bop(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Balance Of Power indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] bop(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Balance Of Power indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] bop(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Camarilla Pivot Points for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod value form 0 to 9 that describes the period used in the indicator. Periods are as follows: 
     * <code>ONE_MIN, FIVE_MINS, TEN_MINS, FIFTEEN_MINS, THIRTY_MINS, ONE_HOUR, FOUR_HOURS, DAILY, WEEKLY, MONTHLY</code> 
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] camPivot(Instrument instrument, Period period, OfferSide side, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Camarilla Pivot Points for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod value form 0 to 9 that describes the period used in the indicator. Periods are as follows: 
     * <code>ONE_MIN, FIVE_MINS, TEN_MINS, FIFTEEN_MINS, THIRTY_MINS, ONE_HOUR, FOUR_HOURS, DAILY, WEEKLY, MONTHLY</code>
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] camPivot(Instrument instrument, Period period, OfferSide side, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Camarilla Pivot Points for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod value form 0 to 9 that describes the period used in the indicator. Periods are as follows: 
     * <code>ONE_MIN, FIVE_MINS, TEN_MINS, FIFTEEN_MINS, THIRTY_MINS, ONE_HOUR, FOUR_HOURS, DAILY, WEEKLY, MONTHLY</code>
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] camPivot(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Camarilla Pivot Points for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod value form 0 to 9 that describes the period used in the indicator. Periods are as follows: 
     * <code>ONE_MIN, FIVE_MINS, TEN_MINS, FIFTEEN_MINS, THIRTY_MINS, ONE_HOUR, FOUR_HOURS, DAILY, WEEKLY, MONTHLY</code>
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] camPivot(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Commodity Channel Index for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double cci(Instrument instrument, Period period, OfferSide side, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Commodity Channel Index for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] cci(Instrument instrument, Period period, OfferSide side, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Commodity Channel Index for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] cci(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Commodity Channel Index for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] cci(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Two Crows indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdl2Crows(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Two Crows indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdl2Crows(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Two Crows indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdl2Crows(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Two Crows indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdl2Crows(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Three Black Crows indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdl3BlackCrows(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Three Black Crows indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdl3BlackCrows(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Three Black Crows indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdl3BlackCrows(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Three Black Crows indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdl3BlackCrows(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Three Inside Up/Down indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdl3Inside(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Three Inside Up/Down indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdl3Inside(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Three Inside Up/Down indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdl3Inside(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Three Inside Up/Down indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdl3Inside(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Three-Line Strike indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdl3LineStrike(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Three-Line Strike indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdl3LineStrike(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Three-Line Strike indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdl3LineStrike(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Three-Line Strike indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdl3LineStrike(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Three Outside Up/Down indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdl3Outside(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Three Outside Up/Down indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdl3Outside(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Three Outside Up/Down indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdl3Outside(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Three Outside Up/Down indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdl3Outside(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Three Stars In The South indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdl3StarsInSouth(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Three Stars In The South indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdl3StarsInSouth(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Three Stars In The South indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdl3StarsInSouth(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Three Stars In The South indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdl3StarsInSouth(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Three Advancing White Soldiers indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdl3WhiteSoldiers(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Three Advancing White Soldiers indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdl3WhiteSoldiers(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Three Advancing White Soldiers indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdl3WhiteSoldiers(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Three Advancing White Soldiers indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdl3WhiteSoldiers(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Abandoned Baby indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param penetration percentage of penetration of a candle within another candle
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlAbandonedBaby(Instrument instrument, Period period, OfferSide side, double penetration, int shift) throws JFException;

    /**
     * Calculates the Abandoned Baby indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param penetration percentage of penetration of a candle within another candle
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlAbandonedBaby(Instrument instrument, Period period, OfferSide side, double penetration, long from, long to) throws JFException;

    /**
     * Calculates the Abandoned Baby indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param penetration percentage of penetration of a candle within another candle
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlAbandonedBaby(Instrument instrument, Period period, OfferSide side, double penetration, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Abandoned Baby indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param penetration percentage of penetration of a candle within another candle
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlAbandonedBaby(Instrument instrument, Period period, OfferSide side, double penetration, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Advance Block indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlAdvanceBlock(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Advance Block indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlAdvanceBlock(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Advance Block indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlAdvanceBlock(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Advance Block indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlAdvanceBlock(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Belt-hold indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlBeltHold(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Belt-hold indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bare
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlBeltHold(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Belt-hold indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlBeltHold(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Belt-hold indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlBeltHold(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Breakaway indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlBreakAway(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Breakaway indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlBreakAway(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Breakaway indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlBreakAway(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Breakaway indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlBreakAway(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Closing Marubozu indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlClosingMarubozu(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Closing Marubozu indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlClosingMarubozu(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Closing Marubozu indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlClosingMarubozu(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Closing Marubozu indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlClosingMarubozu(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Concealing Baby Swallow indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlConcealBabySwall(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Concealing Baby Swallow indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlConcealBabySwall(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Concealing Baby Swallow indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlConcealBabySwall(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Concealing Baby Swallow indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlConcealBabySwall(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Counterattack indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlCounterattack(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Counterattack indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlCounterattack(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Counterattack indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlCounterattack(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Counterattack indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlCounterattack(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Dark Cloud Cover indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param penetration Percentage of penetration of a candle within another candle
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlDarkCloudCover(Instrument instrument, Period period, OfferSide side, double penetration, int shift) throws JFException;

    /**
     * Calculates the Dark Cloud Cover indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param penetration Percentage of penetration of a candle within another candle
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlDarkCloudCover(Instrument instrument, Period period, OfferSide side, double penetration, long from, long to) throws JFException;

    /**
     * Calculates the Dark Cloud Cover indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param penetration Percentage of penetration of a candle within another candle
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlDarkCloudCover(Instrument instrument, Period period, OfferSide side, double penetration, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Dark Cloud Cover indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param penetration Percentage of penetration of a candle within another candle
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlDarkCloudCover(Instrument instrument, Period period, OfferSide side, double penetration, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Doji indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlDoji(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Doji indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlDoji(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Doji indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlDoji(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Doji indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlDoji(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Doji Star indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlDojiStar(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Doji Star indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlDojiStar(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Doji Star indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlDojiStar(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Doji Star indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlDojiStar(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Dragonfly Doji indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlDragonflyDoji(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Dragonfly Doji indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlDragonflyDoji(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Dragonfly Doji indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlDragonflyDoji(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Dragonfly Doji indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlDragonflyDoji(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Engulfing Pattern indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlEngulfing(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Engulfing Pattern indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlEngulfing(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Engulfing Pattern indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlEngulfing(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Engulfing Pattern indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlEngulfing(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Evening Doji Star indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param penetration Percentage of penetration of a candle within another candle
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlEveningDojiStar(Instrument instrument, Period period, OfferSide side, double penetration, int shift) throws JFException;

    /**
     * Calculates the Evening Doji Star indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param penetration Percentage of penetration of a candle within another candle
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlEveningDojiStar(Instrument instrument, Period period, OfferSide side, double penetration, long from, long to) throws JFException;

    /**
     * Calculates the Evening Doji Star indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param penetration Percentage of penetration of a candle within another candle
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlEveningDojiStar(Instrument instrument, Period period, OfferSide side, double penetration, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Evening Doji Star indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param penetration Percentage of penetration of a candle within another candle
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlEveningDojiStar(Instrument instrument, Period period, OfferSide side, double penetration, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Evening Star indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param penetration Percentage of penetration of a candle within another candle
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlEveningStar(Instrument instrument, Period period, OfferSide side, double penetration, int shift) throws JFException;

    /**
     * Calculates the Evening Star indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param penetration Percentage of penetration of a candle within another candle
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlEveningStar(Instrument instrument, Period period, OfferSide side, double penetration, long from, long to) throws JFException;

    /**
     * Calculates the Evening Star indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param penetration Percentage of penetration of a candle within another candle
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlEveningStar(Instrument instrument, Period period, OfferSide side, double penetration, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Evening Star indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param penetration Percentage of penetration of a candle within another candle
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlEveningStar(Instrument instrument, Period period, OfferSide side, double penetration, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Up/Down-gap side-by-side white lines indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlGapSideSideWhite(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Up/Down-gap side-by-side white lines indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlGapSideSideWhite(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Up/Down-gap side-by-side white lines indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlGapSideSideWhite(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Up/Down-gap side-by-side white lines indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlGapSideSideWhite(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Gravestone Doji indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlGravestoneDoji(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Gravestone Doji indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlGravestoneDoji(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Gravestone Doji indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlGravestoneDoji(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Gravestone Doji indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlGravestoneDoji(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Hammer indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlHammer(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Hammer indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlHammer(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Hammer indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlHammer(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Hammer indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlHammer(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Hanging Man indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlHangingMan(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Hanging Man indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlHangingMan(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Hanging Man indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlHangingMan(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Hanging Man indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlHangingMan(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Harami Pattern for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlHarami(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Harami Pattern for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlHarami(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Harami Pattern for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlHarami(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Harami Pattern for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlHarami(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Harami Cross Pattern for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlHaramiCross(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Harami Cross Pattern for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlHaramiCross(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Harami Cross Pattern for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlHaramiCross(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Harami Cross Pattern for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlHaramiCross(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the High-Wave Candle indicator a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlHighWave(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the High-Wave Candle indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlHighWave(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the High-Wave Candle indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlHighWave(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the High-Wave Candle indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlHighWave(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Hikkake Pattern for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlHikkake(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Hikkake Pattern for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlHikkake(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Hikkake Pattern for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlHikkake(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Hikkake Pattern for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlHikkake(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Modified Hikkake Pattern for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlHikkakeMod(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Modified Hikkake Pattern for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlHikkakeMod(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Modified Hikkake Pattern for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlHikkakeMod(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Modified Hikkake Pattern for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlHikkakeMod(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Homing Pigeon indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlHomingPigeon(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Homing Pigeon indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlHomingPigeon(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Homing Pigeon indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlHomingPigeon(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Homing Pigeon indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlHomingPigeon(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Identical Three Crows indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlIdentical3Crows(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Identical Three Crows indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlIdentical3Crows(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Identical Three Crows indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlIdentical3Crows(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Identical Three Crows indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlIdentical3Crows(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the In-Neck Pattern for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlInNeck(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the In-Neck Pattern for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlInNeck(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the In-Neck Pattern for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlInNeck(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the In-Neck Pattern for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlInNeck(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Inverted Hammer indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlInvertedHammer(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Inverted Hammer indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlInvertedHammer(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Inverted Hammer indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlInvertedHammer(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Inverted Hammer indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlInvertedHammer(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Kicking indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlKicking(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Kicking indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlKicking(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Kicking indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlKicking(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Kicking indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlKicking(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Kicking - bull/bear determined by the longer marubozu indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlKickingByLength(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Kicking - bull/bear determined by the longer marubozu indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlKickingByLength(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Kicking - bull/bear determined by the longer marubozu indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlKickingByLength(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Kicking - bull/bear determined by the longer marubozu indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlKickingByLength(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;
   
    /**
     * @deprecated replaced by {@link #cdlLadderBottom(Instrument instrument, Period period, OfferSide side, int shift)}  
     */
    public int cdlLadderBotton(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * @deprecated replaced by {@link #cdlLadderBottom(Instrument instrument, Period period, OfferSide side, long from, long to)}  
     */
    public int[] cdlLadderBotton(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * @deprecated replaced by {@link #cdlLadderBottom(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter)}  
     */
    public int[] cdlLadderBotton(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * @deprecated replaced by {@link #cdlLadderBottom(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to)}  
     */
    public int[] cdlLadderBotton(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;
    
    /**
     * Calculates the Ladder Bottom indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlLadderBottom(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Ladder Bottom indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlLadderBottom(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Ladder Bottom indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlLadderBottom(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Ladder Bottom indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlLadderBottom(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Long Legged Doji indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlLongLeggedDoji(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Long Legged Doji indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlLongLeggedDoji(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Long Legged Doji indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlLongLeggedDoji(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Long Legged Doji indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlLongLeggedDoji(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Long Line Candle indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlLongLine(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Long Line Candle indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlLongLine(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Long Line Candle indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlLongLine(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Long Line Candle indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlLongLine(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Marubozu indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlMarubozu(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Marubozu indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlMarubozu(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Marubozu indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlMarubozu(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Marubozu indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlMarubozu(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Matching Low indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlMatchingLow(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Matching Low indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlMatchingLow(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Matching Low indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlMatchingLow(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Matching Low indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlMatchingLow(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Mat Hold indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param penetration Percentage of penetration of a candle within another candle
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlMathold(Instrument instrument, Period period, OfferSide side, double penetration, int shift) throws JFException;;

    /**
     * Calculates the Mat Hold indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param penetration Percentage of penetration of a candle within another candle
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlMathold(Instrument instrument, Period period, OfferSide side, double penetration, long from, long to) throws JFException;

    /**
     * Calculates the Mat Hold indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param penetration Percentage of penetration of a candle within another candle
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlMathold(Instrument instrument, Period period, OfferSide side, double penetration, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Mat Hold indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param penetration Percentage of penetration of a candle within another candle
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlMathold(Instrument instrument, Period period, OfferSide side, double penetration, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Morning Doji Star indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param penetration Percentage of penetration of a candle within another candle
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlMorningDojiStar(Instrument instrument, Period period, OfferSide side, double penetration, int shift) throws JFException;

    /**
     * Calculates the Morning Doji Star indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param penetration Percentage of penetration of a candle within another candle
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlMorningDojiStar(Instrument instrument, Period period, OfferSide side, double penetration, long from, long to) throws JFException;

    /**
     * Calculates the Morning Doji Star indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param penetration Percentage of penetration of a candle within another candle
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlMorningDojiStar(Instrument instrument, Period period, OfferSide side, double penetration, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Morning Doji Star indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param penetration Percentage of penetration of a candle within another candle
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlMorningDojiStar(Instrument instrument, Period period, OfferSide side, double penetration, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Morning Star indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param penetration Percentage of penetration of a candle within another candle
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlMorningStar(Instrument instrument, Period period, OfferSide side, double penetration, int shift) throws JFException;

    /**
     * Calculates the Morning Star indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param penetration Percentage of penetration of a candle within another candle
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlMorningStar(Instrument instrument, Period period, OfferSide side, double penetration, long from, long to) throws JFException;

    /**
     * Calculates the Morning Star indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param penetration Percentage of penetration of a candle within another candle
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlMorningStar(Instrument instrument, Period period, OfferSide side, double penetration, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Morning Star indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param penetration Percentage of penetration of a candle within another candle
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlMorningStar(Instrument instrument, Period period, OfferSide side, double penetration, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the On-Neck Pattern for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlOnNeck(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the On-Neck Pattern for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlOnNeck(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the On-Neck Pattern for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlOnNeck(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the On-Neck Pattern for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlOnNeck(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Piercing Pattern for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlPiercing(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Piercing Pattern for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.s
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlPiercing(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Piercing Pattern for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlPiercing(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Piercing Pattern for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlPiercing(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Rickshaw Man indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlRickshawMan(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Rickshaw Man indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlRickshawMan(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Rickshaw Man indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlRickshawMan(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Rickshaw Man indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlRickshawMan(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Rising/Falling Three Methods indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlRiseFall3Methods(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Rising/Falling Three Methods indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlRiseFall3Methods(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Rising/Falling Three Methods indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlRiseFall3Methods(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Rising/Falling Three Methods indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlRiseFall3Methods(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Separating Lines indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlSeparatingLines(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Separating Lines indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlSeparatingLines(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Separating Lines indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlSeparatingLines(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Separating Lines indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlSeparatingLines(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Shooting Star indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlShootingStar(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Shooting Star indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlShootingStar(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Shooting Star indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlShootingStar(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Shooting Star indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlShootingStar(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Short Line Candle indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlShortLine(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Short Line Candle indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlShortLine(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Short Line Candle indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlShortLine(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Short Line Candle indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlShortLine(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Spinning Top indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlSpinningTop(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Spinning Top indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlSpinningTop(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Spinning Top indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlSpinningTop(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Spinning Top indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlSpinningTop(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Stalled Pattern indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlStalledPattern(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Stalled Pattern indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlStalledPattern(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Stalled Pattern indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlStalledPattern(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Stalled Pattern indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlStalledPattern(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Stick Sandwich indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlStickSandwich(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Stick Sandwich indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlStickSandwich(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;
    
    /**
     * Calculates the Stick Sandwich indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlStickSandwich(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Stick Sandwich indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlStickSandwich(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Takuri indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlTakuri(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Takuri indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlTakuri(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Takuri indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlTakuri(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Takuri indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlTakuri(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Tasuki Gap indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlTasukiGap(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Tasuki Gap indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlTasukiGap(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Tasuki Gap indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlTasukiGap(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Tasuki Gap indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlTasukiGap(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Thrusting Pattern for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlThrusting(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Thrusting Pattern for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlThrusting(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Thrusting Pattern for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlThrusting(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Thrusting Pattern for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlThrusting(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Tristar Pattern for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlTristar(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Tristar Pattern for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlTristar(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Tristar Pattern for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlTristar(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Tristar Pattern for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlTristar(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Unique 3 River indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlUnique3River(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Unique 3 River indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlUnique3River(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Unique 3 River indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlUnique3River(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Unique 3 River indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlUnique3River(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Upside Gap Two Crows indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlUpsideGap2Crows(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Upside Gap Two Crows indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlUpsideGap2Crows(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Upside Gap Two Crows indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlUpsideGap2Crows(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Upside Gap Two Crows indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlUpsideGap2Crows(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Upside/Downside Gap Three Methods for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int cdlXsideGap3Methods(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Upside/Downside Gap Three Methods for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlXsideGap3Methods(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Upside/Downside Gap Three Methods for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlXsideGap3Methods(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Upside/Downside Gap Three Methods for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] cdlXsideGap3Methods(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Vector Ceil indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double ceil(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int shift) throws JFException;

    /**
     * Calculates the Vector Ceil indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] ceil(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, long from, long to) throws JFException;

    /**
     * Calculates the Vector Ceil indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] ceil(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * 
     * Calculates the Vector Ceil indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] ceil(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Chande Momentum Oscillator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double cmo(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Chande Momentum Oscillator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] cmo(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Chande Momentum Oscillator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] cmo(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Chande Momentum Oscillator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] cmo(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, long from, long to) throws JFException;
    
    /**
     * Calculates the Center Of Gravity indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param smoothPeriod smoothing period 
     * @param maType {@link IIndicators.MaType type} of moving average
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] cog(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int smoothPeriod, MaType maType, int shift) throws JFException;

    /**
     * Calculates the Center Of Gravity indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param smoothPeriod smoothing period 
     * @param maType {@link IIndicators.MaType type} of moving average
     ** @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] cog(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int smoothPeriod, MaType maType, long from, long to) throws JFException;

    /**
     * Calculates the Center Of Gravity indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param smoothPeriod smoothing period 
     * @param maType {@link IIndicators.MaType type} of moving average
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] cog(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int smoothPeriod, MaType maType, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Center Of Gravity indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param smoothPeriod smoothing period 
     * @param maType {@link IIndicators.MaType type} of moving average
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] cog(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int smoothPeriod, MaType maType, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Pearson's Correlation Coefficient for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side1 Bid or Ask side of the bar for the first input parameter
     * @param appliedPrice1 {@link IIndicators.AppliedPrice type} of input data for the first input parameter
     * @param side2 Bid or Ask side of the bar for the second input parameter
     * @param appliedPrice2 {@link IIndicators.AppliedPrice type} of input data for the second input parameter
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double correl(Instrument instrument, Period period, OfferSide side1, AppliedPrice appliedPrice1, OfferSide side2, AppliedPrice appliedPrice2, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Pearson's Correlation Coefficient for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side1 Bid or Ask side of the bar for the first input parameter
     * @param appliedPrice1 {@link IIndicators.AppliedPrice type} of input data for the first input parameter
     * @param side2 Bid or Ask side of the bar for the second input parameter
     * @param appliedPrice2 {@link IIndicators.AppliedPrice type} of input data for the second input parameter
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] correl(Instrument instrument, Period period, OfferSide side1, AppliedPrice appliedPrice1, OfferSide side2, AppliedPrice appliedPrice2, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Pearson's Correlation Coefficient for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side1 Bid or Ask side of the bar for the first input parameter
     * @param appliedPrice1 {@link IIndicators.AppliedPrice type} of input data for the first input parameter
     * @param side2 Bid or Ask side of the bar for the second input parameter
     * @param appliedPrice2 {@link IIndicators.AppliedPrice type} of input data for the second input parameter
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] correl(Instrument instrument, Period period, OfferSide side1, AppliedPrice appliedPrice1, OfferSide side2, AppliedPrice appliedPrice2, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Pearson's Correlation Coefficient for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side1 Bid or Ask side of the bar for the first input parameter
     * @param appliedPrice1 {@link IIndicators.AppliedPrice type} of input data for the first input parameter
     * @param side2 Bid or Ask side of the bar for the second input parameter
     * @param appliedPrice2 {@link IIndicators.AppliedPrice type} of input data for the second input parameter
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] correl(Instrument instrument, Period period, OfferSide side1, AppliedPrice appliedPrice1, OfferSide side2, AppliedPrice appliedPrice2, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Vector Trigonometric Cos for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double cos(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int shift) throws JFException;

    /**
     * Calculates the Vector Trigonometric Cos for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] cos(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, long from, long to) throws JFException;

    /**
     * Calculates the Vector Trigonometric Cos for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] cos(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Vector Trigonometric Cos for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] cos(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Vector Trigonometric Cosh for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double cosh(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int shift) throws JFException;

    /**
     * Calculates the Vector Trigonometric Cosh for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] cosh(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, long from, long to) throws JFException;

    /**
     * Calculates the Vector Trigonometric Cosh for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] cosh(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Vector Trigonometric Cosh for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] cosh(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, long from, long to)throws JFException;

    /**
     * Calculates the Double Exponential Moving Average for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double dema(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Double Exponential Moving Average for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] dema(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Double Exponential Moving Average for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] dema(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Double Exponential Moving Average for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] dema(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Vector Arithmetic Div for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side1 Bid or Ask side of the bar for the first input parameter
     * @param appliedPrice1 {@link IIndicators.AppliedPrice type} of input data for the first input parameter
     * @param side2 Bid or Ask side of the bar for the second input parameter
     * @param appliedPrice2 {@link IIndicators.AppliedPrice type} of input data for the second input parameter
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double div(Instrument instrument, Period period, OfferSide side1, AppliedPrice appliedPrice1, OfferSide side2, AppliedPrice appliedPrice2, int shift) throws JFException;

    /**
     * Calculates the Vector Arithmetic Div for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side1 Bid or Ask side of the bar for the first input parameter
     * @param appliedPrice1 {@link IIndicators.AppliedPrice type} of input data for the first input parameter
     * @param side2 Bid or Ask side of the bar for the second input parameter
     * @param appliedPrice2 {@link IIndicators.AppliedPrice type} of input data for the second input parameter
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] div(Instrument instrument, Period period, OfferSide side1, AppliedPrice appliedPrice1, OfferSide side2, AppliedPrice appliedPrice2, long from, long to) throws JFException;

    /**
     * Calculates the Vector Arithmetic Div for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side1 Bid or Ask side of the bar for the first input parameter
     * @param appliedPrice1 {@link IIndicators.AppliedPrice type} of input data for the first input parameter
     * @param side2 Bid or Ask side of the bar for the second input parameter
     * @param appliedPrice2 {@link IIndicators.AppliedPrice type} of input data for the second input parameter
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] div(Instrument instrument, Period period, OfferSide side1, AppliedPrice appliedPrice1, OfferSide side2, AppliedPrice appliedPrice2, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Vector Arithmetic Div for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side1 Bid or Ask side of the bar for the first input parameter
     * @param appliedPrice1 {@link IIndicators.AppliedPrice type} of input data for the first input parameter
     * @param side2 Bid or Ask side of the bar for the second input parameter
     * @param appliedPrice2 {@link IIndicators.AppliedPrice type} of input data for the second input parameter
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] div(Instrument instrument, Period period, OfferSide side1, AppliedPrice appliedPrice1, OfferSide side2,
            AppliedPrice appliedPrice2, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Average Directional Movement Index for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] dmi(Instrument instrument, Period period, OfferSide side, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Average Directional Movement Index for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] dmi(Instrument instrument, Period period, OfferSide side, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Average Directional Movement Index for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] dmi(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Average Directional Movement Index for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] dmi(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, long from, long to) throws JFException;
    
    /**
     * Calculates the Donchian Channel indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] donchian(Instrument instrument, Period period, OfferSide side, int timePeriod, int shift) throws JFException;    

    /**
     * Calculates the Donchian Channel indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] donchian(Instrument instrument, Period period, OfferSide side, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Donchian Channel indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] donchian(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Donchian Channel indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] donchian(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Directional Movement Index for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double dx(Instrument instrument, Period period, OfferSide side, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Directional Movement Index for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] dx(Instrument instrument, Period period, OfferSide side, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Directional Movement Index for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] dx(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Directional Movement Index for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] dx(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Exponential Moving Average for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period value
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Exponential_Moving_Average>Exponential Moving Average</a>
     */
    public double ema(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;
    
    /**
     * Calculates the Exponential Moving Average for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code>parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar or tick
     * @param period period of the bar or TICK
     * @param side Bid or Ask side of the bar which price to take for 1sec bars generation for ticks or side for bars
     * @param appliedPrice type of input data
     * @param timePeriod time period value
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Exponential_Moving_Average>Exponential Moving Average</a>
     */
    public double[] ema(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Exponential Moving Average for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period value
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Exponential_Moving_Average>Exponential Moving Average</a>
     */
    public double[] ema(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Exponential Moving Average for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period value
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Exponential_Moving_Average>Exponential Moving Average</a>
     */
    public double[] ema(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the EMA Envelope indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param deviation deviation
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] emaEnvelope(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, double deviation, int shift) throws JFException;

    /**
     * Calculates the EMA Envelope indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param deviation deviation
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] emaEnvelope(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, double deviation, long from, long to) throws JFException;

    /**
     * Calculates the EMA Envelope indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param deviation deviation
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] emaEnvelope(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, double deviation, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the EMA Envelope indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param deviation deviation
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] emaEnvelope(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, double deviation, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Vector Arithmetic Exp indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double exp(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int shift) throws JFException;

    /**
     * Calculates the Vector Arithmetic Exp indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] exp(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, long from, long to) throws JFException;

    /**
     * Calculates the Vector Arithmetic Exp indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] exp(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Vector Arithmetic Exp indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] exp(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Fibonacci Pivot Points for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod value form 0 to 9 that describes the period used in the indicator. Periods are as follows: 
     * <code>ONE_MIN, FIVE_MINS, TEN_MINS, FIFTEEN_MINS, THIRTY_MINS, ONE_HOUR, FOUR_HOURS, DAILY, WEEKLY, MONTHLY</code> 
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] fibPivot(Instrument instrument, Period period, OfferSide side, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Fibonacci Pivot Points for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod value form 0 to 9 that describes the period used in the indicator. Periods are as follows: 
     * <code>ONE_MIN, FIVE_MINS, TEN_MINS, FIFTEEN_MINS, THIRTY_MINS, ONE_HOUR, FOUR_HOURS, DAILY, WEEKLY, MONTHLY</code>
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] fibPivot(Instrument instrument, Period period, OfferSide side, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Fibonacci Pivot Points for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod value form 0 to 9 that describes the period used in the indicator. Periods are as follows: 
     * <code>ONE_MIN, FIVE_MINS, TEN_MINS, FIFTEEN_MINS, THIRTY_MINS, ONE_HOUR, FOUR_HOURS, DAILY, WEEKLY, MONTHLY</code>
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] fibPivot(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Fibonacci Pivot Points for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod value form 0 to 9 that describes the period used in the indicator. Periods are as follows: 
     * <code>ONE_MIN, FIVE_MINS, TEN_MINS, FIFTEEN_MINS, THIRTY_MINS, ONE_HOUR, FOUR_HOURS, DAILY, WEEKLY, MONTHLY</code>
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] fibPivot(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Vector Floor indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double floor(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int shift) throws JFException;

    /**
     * Calculates the Vector Floor indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] floor(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, long from, long to) throws JFException;

    /**
     * Calculates the Vector Floor indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] floor(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Vector Floor indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] floor(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, long from, long to) throws JFException;
    
    /**
     * Calculates the Force Index for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param maType {@link IIndicators.MaType type} of moving average
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double force(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, MaType maType, int shift) throws JFException;

    /**
     * Calculates the Force Index for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param maType {@link IIndicators.MaType type} of moving average
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] force(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, MaType maType, long from, long to) throws JFException;
    
    /**
     * Calculates the Force Index for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param maType {@link IIndicators.MaType type} of moving average
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] force(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, MaType maType,Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Force Index for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param maType {@link IIndicators.MaType type} of moving average
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] force(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, MaType maType, Filter filter, long from, long to) throws JFException;
        
    /**
     * Calculates the Fractal indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param barsOnSides number of bars on the sides
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] fractal(Instrument instrument, Period period, OfferSide side, int barsOnSides, int shift) throws JFException;

    /**
     * Calculates the Fractal indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param barsOnSides number of bars on the sides
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] fractal(Instrument instrument, Period period, OfferSide side, int barsOnSides, long from, long to) throws JFException;

    /**
     * Calculates the Fractal indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param barsOnSides number of bars on the sides
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] fractal(Instrument instrument, Period period, OfferSide side, int barsOnSides, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Fractal indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param barsOnSides number of bars on the sides
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] fractal(Instrument instrument, Period period, OfferSide side, int barsOnSides, Filter filter, long from, long to) throws JFException;
    
    /**
     * Calculates the Fractal lines indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param barsOnSides number of bars on the sides
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] fractalLines(Instrument instrument, Period period, OfferSide side, int barsOnSides, int shift) throws JFException;

    /**
     * Calculates the Fractal lines indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param barsOnSides number of bars on the sides
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] fractalLines(Instrument instrument, Period period, OfferSide side, int barsOnSides, long from, long to) throws JFException;

    /**
     * Calculates the Fractal lines indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param barsOnSides number of bars on the sides
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] fractalLines(Instrument instrument, Period period, OfferSide side, int barsOnSides, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Fractal lines indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param barsOnSides number of bars on the sides
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] fractalLines(Instrument instrument, Period period, OfferSide side, int barsOnSides, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Gator Oscillator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param jawTimePeriod jaw time period
     * @param teethTimePeriod teeth time period
     * @param lipsTimePeriod lips time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] gator(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int jawTimePeriod, int teethTimePeriod, int lipsTimePeriod, int shift) throws JFException;        

    /**
     * Calculates the Gator Oscillator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param jawTimePeriod jaw time period
     * @param teethTimePeriod teeth time period
     * @param lipsTimePeriod lips time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] gator(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int jawTimePeriod, int teethTimePeriod, int lipsTimePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Gator Oscillator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param jawTimePeriod jaw time period
     * @param teethTimePeriod teeth time period
     * @param lipsTimePeriod lips time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] gator(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int jawTimePeriod, int teethTimePeriod, int lipsTimePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Gator Oscillator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param jawTimePeriod jaw time period
     * @param teethTimePeriod teeth time period
     * @param lipsTimePeriod lips time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] gator(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int jawTimePeriod, int teethTimePeriod, int lipsTimePeriod, Filter filter, long from, long to) throws JFException;

    /**	
     * @deprecated replaced by {@link #heikinAshi(Instrument instrument, Period period, OfferSide side, int shift)}
     */
    public double[] heikenAshi(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * @deprecated replaced by {@link #heikinAshi(Instrument instrument, Period period, OfferSide side, long from, long to)}
     */
    public double[][] heikenAshi(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * @deprecated replaced by {@link #heikinAshi(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter)}
     */
    public double[][] heikenAshi(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;

    /**
     * Calculates the Heikin Ashi indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return array with prices. The result array contains prices in the following order: OPEN, CLOSE, MIN, MAX.
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>     
     */
    public double[] heikinAshi(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Heikin Ashi indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars.      
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * 
     * @return array of arrays with prices. The result array contains prices in the following order: OPEN, CLOSE, MIN, MAX.
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] heikinAshi(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Heikin Ashi indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter     
     * @param filter {@link Filter filter}
     * @return array of arrays with prices. The result array contains prices in the following order: OPEN, CLOSE, MIN, MAX.
     */
    public double[][] heikinAshi(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;

    /**
     * Calculates the Heikin Ashi indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return array of arrays with prices. The result array contains prices in the following order: OPEN, CLOSE, MIN, MAX.
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] heikinAshi(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Hull Moving Average indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double hma(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;
    
    /**
     * Calculates the Hull Moving Average indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] hma(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Hull Moving Average indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] hma(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Hull Moving Average indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] hma(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Hilbert Transform - Dominant Cycle Period indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double ht_dcperiod(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int shift) throws JFException;

    /**
     * Calculates the Hilbert Transform - Dominant Cycle Period indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] ht_dcperiod(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, long from, long to) throws JFException;

    /**
     * Calculates the Hilbert Transform - Dominant Cycle Period indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] ht_dcperiod(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Hilbert Transform - Dominant Cycle Period indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] ht_dcperiod(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Hilbert Transform - Dominant Cycle Phase for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double ht_dcphase(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int shift) throws JFException;

    /**
     * Calculates the Hilbert Transform - Dominant Cycle Phase for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] ht_dcphase(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, long from, long to) throws JFException;

    /**
     * Calculates the Hilbert Transform - Dominant Cycle Phase for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] ht_dcphase(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Hilbert Transform - Dominant Cycle Phase for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] ht_dcphase(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Hilbert Transform - Phasor Components indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] ht_phasor(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int shift) throws JFException;

    /**
     * Calculates the Hilbert Transform - Phasor Components indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] ht_phasor(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, long from, long to) throws JFException;

    /**
     * Calculates the Hilbert Transform - Phasor Components indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] ht_phasor(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Hilbert Transform - Phasor Components indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] ht_phasor(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Hilbert Transform - SineWave indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] ht_sine(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int shift) throws JFException;

    /**
     * Calculates the Hilbert Transform - SineWave indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] ht_sine(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, long from, long to) throws JFException;

    /**
     * Calculates the Hilbert Transform - SineWave indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] ht_sine(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Hilbert Transform - SineWave indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] ht_sine(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Hilbert Transform - Instantaneous Trendline indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Hilbert_Transform_-_Instantaneous_Trendline>Hilbert Transform - Instantaneous Trendline indicator</a>
     */
    public double ht_trendline(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int shift) throws JFException;

    /**
     * Calculates the Hilbert Transform - Instantaneous Trendline indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Hilbert_Transform_-_Instantaneous_Trendline>Hilbert Transform - Instantaneous Trendline indicator</a>
     */
    public double[] ht_trendline(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, long from, long to) throws JFException;

    /**
     * Calculates the Hilbert Transform - Instantaneous Trendline indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Hilbert_Transform_-_Instantaneous_Trendline>Hilbert Transform - Instantaneous Trendline indicator</a>
     */
    public double[] ht_trendline(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Hilbert Transform - Instantaneous Trendline indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Hilbert_Transform_-_Instantaneous_Trendline>Hilbert Transform - Instantaneous Trendline indicator</a>
     */
    public double[] ht_trendline(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Hilbert Transform - Trend vs Cycle Mode indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int ht_trendmode(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int shift) throws JFException;

    /**
     * Calculates the Hilbert Transform - Trend vs Cycle Mode indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] ht_trendmode(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, long from, long to) throws JFException;

    /**
     * Calculates the Hilbert Transform - Trend vs Cycle Mode indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] ht_trendmode(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Hilbert Transform - Trend vs Cycle Mode indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] ht_trendmode(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, long from, long to) throws JFException;
    
    /**
     * Calculates the Ichimoku indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param tenkan tenkan
     * @param kijun kijun
     * @param senkou senkou
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] ichimoku(Instrument instrument, Period period, OfferSide side, int tenkan, int kijun, int senkou, int shift) throws JFException;

    /**
     * Calculates the Ichimoku indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param tenkan tenkan
     * @param kijun kijun
     * @param senkou senkou
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] ichimoku(Instrument instrument, Period period, OfferSide side, int tenkan, int kijun, int senkou, long from, long to) throws JFException;

    /**
     * Calculates the Ichimoku indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param tenkan tenkan
     * @param kijun kijun
     * @param senkou senkou
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] ichimoku(Instrument instrument, Period period, OfferSide side, int tenkan, int kijun, int senkou, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Ichimoku indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param tenkan tenkan
     * @param kijun kijun
     * @param senkou senkou
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] ichimoku(Instrument instrument, Period period, OfferSide side, int tenkan, int kijun, int senkou, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Kairi indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param maType {@link IIndicators.MaType type} of moving average
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double kairi(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, MaType maType, int shift) throws JFException;

    /**
     * Calculates the Kairi indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param maType {@link IIndicators.MaType type} of moving average
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] kairi(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, MaType maType, long from, long to) throws JFException;

    /**
     * Calculates the Kairi indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param maType {@link IIndicators.MaType type} of moving average
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] kairi(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, MaType maType, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Kairi indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param maType {@link IIndicators.MaType type} of moving average
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] kairi(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, MaType maType, Filter filter, long from, long to) throws JFException;
    
    /**
     * Calculates the Kaufman Adaptive Moving Average indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period 
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double kama(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Kaufman Adaptive Moving Average for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] kama(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Kaufman Adaptive Moving Average for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] kama(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Kaufman Adaptive Moving Average for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] kama(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Keltner Channel indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period 
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] keltner(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Keltner Channel indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] keltner(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Keltner Channel indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] keltner(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Keltner Channel indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] keltner(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * @deprecated replaced by {@link #lagACS1(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int ma, double gamma, int lookback, int shift)} 
     */
    public double lasacs1(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int ma, double gamma, int lookback, int shift) throws JFException;

    /**
     * @deprecated replaced by {@link #lagACS1(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int ma, double gamma, int lookback, long from, long to)} 
     */
    public double[] lasacs1(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int ma, double gamma, int lookback, long from, long to) throws JFException;

    /**
     * @deprecated replaced by {@link #lagACS1(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int ma, double gamma, int lookback, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter)} 
     */
    public double[] lasacs1(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int ma, double gamma, int lookback, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Laguerre-ACS1 indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param ma ma
     * @param gamma gamma
     * @param lookback lookback  
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double lagACS1(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int ma, double gamma, int lookback, int shift) throws JFException;
    
    /**
     * Calculates the Laguerre-ACS1 indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param ma ma
     * @param gamma gamma
     * @param lookback lookback
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] lagACS1(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int ma, double gamma, int lookback, long from, long to) throws JFException;

    /**
     * Calculates the Laguerre-ACS1 indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param ma ma
     * @param gamma gamma
     * @param lookback lookback
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] lagACS1(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int ma, double gamma, int lookback, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Laguerre-ACS1 indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param ma ma
     * @param gamma gamma
     * @param lookback lookback
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] lagACS1(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int ma, double gamma, int lookback, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Linear Regression indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double linearReg(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Linear Regression indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] linearReg(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Linear Regression indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] linearReg(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Linear Regression indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] linearReg(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Linear Regression Angle indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period 
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double linearRegAngle(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Linear Regression Angle indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] linearRegAngle(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Linear Regression Angle indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] linearRegAngle(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Linear Regression Angle indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] linearRegAngle(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Linear Regression Intercept indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period 
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double linearRegIntercept(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Linear Regression Intercept indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] linearRegIntercept(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Linear Regression Intercept indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] linearRegIntercept(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Linear Regression Intercept indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] linearRegIntercept(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Linear Regression Slope indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period 
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double linearRegSlope(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Linear Regression Slope indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] linearRegSlope(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;

    /**
     * Calculates the Linear Regression Slope indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] linearRegSlope(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;
    
    /**
     * Calculates the Linear Regression Slope indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] linearRegSlope(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Vector Log Natural for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double ln(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int shift) throws JFException;

    /**
     * Calculates the Vector Log Natural for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] ln(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;

    /**
     * Calculates the Vector Log Natural for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] ln(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, long from, long to) throws JFException;
    
    /**
     * Calculates the Vector Log Natural for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] ln(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Vector Log10 for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double log10(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int shift) throws JFException;

    /**
     * Calculates the Vector Log10 for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] log10(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;

    /**
     * Calculates the Vector Log10 for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] log10(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, long from, long to) throws JFException;
    
    /**
     * Calculates the Vector Log10 for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] log10(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Linear Weighted Moving Average indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period 
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double lwma(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Linear Weighted Moving Average indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] lwma(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Linear Weighted Moving Average indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] lwma(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Linear Weighted Moving Average indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] lwma(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Moving Average for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param maType {@link IIndicators.MaType type} of moving average
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double ma(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, MaType maType, int shift) throws JFException;

    /**
     * Calculates the Moving Average for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param maType {@link IIndicators.MaType type} of moving average
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] ma(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, MaType maType, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;

    /**
     * Calculates the Moving Average for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param maType {@link IIndicators.MaType type} of moving average
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] ma(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, MaType maType, long from, long to) throws JFException;
    
    /**
     * Calculates the Moving Average for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param maType {@link IIndicators.MaType type} of moving average
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] ma(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, MaType maType, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Moving Average Convergence/Divergence indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param fastPeriod period for the fast MA
     * @param slowPeriod period for the slow MA
     * @param signalPeriod smoothing for the signal line
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] macd(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int fastPeriod, int slowPeriod, int signalPeriod, int shift) throws JFException;

    /**
     * Calculates the Moving Average Convergence/Divergence indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param fastPeriod period for the fast MA
     * @param slowPeriod period for the slow MA
     * @param signalPeriod smoothing for the signal line
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] macd(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int fastPeriod, int slowPeriod, int signalPeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;

    /**
     * Calculates the Moving Average Convergence/Divergence indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param fastPeriod period for the fast MA
     * @param slowPeriod period for the slow MA
     * @param signalPeriod smoothing for the signal line
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] macd(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int fastPeriod, int slowPeriod, int signalPeriod, long from, long to) throws JFException;
    
    /**
     * Calculates the Moving Average Convergence/Divergence indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param fastPeriod period for the fast MA
     * @param slowPeriod period for the slow MA
     * @param signalPeriod smoothing for the signal line
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] macd(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int fastPeriod, int slowPeriod, int signalPeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the MACD with controllable MA type indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param fastPeriod period for the fast MA
     * @param fastMaType {@link IIndicators.MaType type} of fast moving average
     * @param slowPeriod period for the slow MA
     * @param slowMaType {@link IIndicators.MaType type} of slow moving average
     * @param signalPeriod smoothing for the signal line
     * @param signalMaType {@link IIndicators.MaType type} of signal moving average
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] macdExt(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int fastPeriod, MaType fastMaType, int slowPeriod, MaType slowMaType, int signalPeriod, MaType signalMaType, int shift) throws JFException;

    /**
     * Calculates the MACD with controllable MA type indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param fastPeriod period for the fast MA
     * @param fastMaType {@link IIndicators.MaType type} of fast moving average
     * @param slowPeriod period for the slow MA
     * @param slowMaType {@link IIndicators.MaType type} of slow moving average
     * @param signalPeriod smoothing for the signal line
     * @param signalMaType {@link IIndicators.MaType type} of signal moving average
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] macdExt(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int fastPeriod, MaType fastMaType, int slowPeriod, MaType slowMaType, int signalPeriod, MaType signalMaType, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;

    /**
     * Calculates the MACD with controllable MA type indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param fastPeriod period for the fast MA
     * @param fastMaType {@link IIndicators.MaType type} of fast moving average
     * @param slowPeriod period for the slow MA
     * @param slowMaType {@link IIndicators.MaType type} of slow moving average
     * @param signalPeriod smoothing for the signal line
     * @param signalMaType {@link IIndicators.MaType type} of signal moving average
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] macdExt(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int fastPeriod, MaType fastMaType, int slowPeriod, MaType slowMaType, int signalPeriod, MaType signalMaType, long from, long to) throws JFException;
    
    /**
     * Calculates the MACD with controllable MA type indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param fastPeriod period for the fast MA
     * @param fastMaType {@link IIndicators.MaType type} of fast moving average
     * @param slowPeriod period for the slow MA
     * @param slowMaType {@link IIndicators.MaType type} of slow moving average
     * @param signalPeriod smoothing for the signal line
     * @param signalMaType {@link IIndicators.MaType type} of signal moving average
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] macdExt(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int fastPeriod, MaType fastMaType, int slowPeriod, MaType slowMaType, int signalPeriod, MaType signalMaType, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Moving Average Convergence/Divergence Fix indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param signalPeriod smoothing for the signal line
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] macdFix(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int signalPeriod, int shift) throws JFException;

    /**
     * Calculates the Moving Average Convergence/Divergence Fix indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param signalPeriod smoothing for the signal line
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] macdFix(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int signalPeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;

    /**
     * Calculates the Moving Average Convergence/Divergence Fix indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param signalPeriod smoothing for the signal line
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] macdFix(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int signalPeriod, long from, long to) throws JFException;
    
    /**
     * Calculates the Moving Average Convergence/Divergence Fix indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param signalPeriod smoothing for the signal line
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] macdFix(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int signalPeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the MA Envelope indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param deviation deviation
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] maEnvelope(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, double deviation, int shift) throws JFException;

    /**
     * Calculates the MA Envelope indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param deviation deviation
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] maEnvelope(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice,int timePeriod, double deviation, long from, long to) throws JFException;

    /**
     * Calculates the MA Envelope indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param deviation deviation
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] maEnvelope(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, double deviation, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the MA Envelope indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param deviation deviation
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] maEnvelope(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, double deviation, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the MESA Adaptive Moving Average indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param fastLimit upper limit use in the adaptive algorithm
     * @param slowLimit lower limit use in the adaptive algorithm
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] mama(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, double fastLimit, double slowLimit, int shift) throws JFException;

    /**
     * Calculates the MESA Adaptive Moving Average indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param fastLimit upper limit use in the adaptive algorithm
     * @param slowLimit lower limit use in the adaptive algorithm
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] mama(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, double fastLimit, double slowLimit, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;

    /**
     * Calculates the MESA Adaptive Moving Average indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param fastLimit upper limit use in the adaptive algorithm
     * @param slowLimit lower limit use in the adaptive algorithm
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] mama(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, double fastLimit, double slowLimit, long from, long to) throws JFException;
    
    /**
     * Calculates the MESA Adaptive Moving Average indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param fastLimit upper limit use in the adaptive algorithm
     * @param slowLimit lower limit use in the adaptive algorithm
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] mama(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, double fastLimit, double slowLimit, Filter filter, long from, long to) throws JFException;
    
    /**
     * Calculates the World Stock Market Time indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return market values for the specified bar as follows:
     * each element of an array is an array of type Object itself or null
     * where the first element of the latter array represents a market (type <code>WSMTimeIndicator.Market</code>)
     * and the second element is a string which describes the market event: <code>open</code> or <code>close</code>
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    
    public Object[] wsmTime(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the World Stock Market Time indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return market values for the specified bars as follows:
     * each element of an array is an array of type Object itself or null
     * where the first element of the latter array represents a market (type <code>WSMTimeIndicator.Market</code>)
     * and the second element is a string which describes the market event: <code>open</code> or <code>close</code> 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public Object[] wsmTime(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;

    /**
     * Calculates the World Stock Market Time indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return market values for the specified bars as follows:
     * each element of an array is an array of type Object itself or null
     * where the first element of the latter array represents a market (type <code>WSMTimeIndicator.Market</code>)
     * and the second element is a string which describes the market event: <code>open</code> or <code>close</code> 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public Object[] wsmTime(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;
    
    /**
     * Calculates the World Stock Market Time indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return market values for the specified bars as follows:
     * each element of an array is an array of type Object itself or null
     * where the first element of the latter array represents a market (type <code>WSMTimeIndicator.Market</code>)
     * and the second element is a string which describes the market event: <code>open</code> or <code>close</code> 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public Object[] wsmTime(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Moving average with variable period indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side1 Bid or Ask side of the bar for the first input parameter
     * @param appliedPrice1 {@link IIndicators.AppliedPrice type} of input data for the first input parameter
     * @param side2 Bid or Ask side of the bar for the second input parameter
     * @param appliedPrice2 {@link IIndicators.AppliedPrice type} of input data for the second input parameter
     * @param minPeriod value less than minimum will be changed to Minimum period
     * @param maxPeriod value higher than maximum will be changed to Maximum period
     * @param maType {@link IIndicators.MaType type} of moving average
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double mavp(Instrument instrument, Period period, OfferSide side1, AppliedPrice appliedPrice1, OfferSide side2, AppliedPrice appliedPrice2, int minPeriod, int maxPeriod, MaType maType, int shift) throws JFException;

    /**
     * Calculates the Moving average with variable period indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side1 Bid or Ask side of the bar for the first input parameter
     * @param appliedPrice1 {@link IIndicators.AppliedPrice type} of input data for the first input parameter
     * @param side2 Bid or Ask side of the bar for the second input parameter
     * @param appliedPrice2 {@link IIndicators.AppliedPrice type} of input data for the second input parameter
     * @param minPeriod value less than minimum will be changed to Minimum period
     * @param maxPeriod value higher than maximum will be changed to Maximum period
     * @param maType {@link IIndicators.MaType type} of moving average
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] mavp(Instrument instrument, Period period, OfferSide side1, AppliedPrice appliedPrice1, OfferSide side2, AppliedPrice appliedPrice2, int minPeriod, int maxPeriod, MaType maType, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;

    /**
     * Calculates the Moving average with variable period indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side1 Bid or Ask side of the bar for the first input parameter
     * @param appliedPrice1 {@link IIndicators.AppliedPrice type} of input data for the first input parameter
     * @param side2 Bid or Ask side of the bar for the second input parameter
     * @param appliedPrice2 {@link IIndicators.AppliedPrice type} of input data for the second input parameter
     * @param minPeriod value less than minimum will be changed to Minimum period
     * @param maxPeriod value higher than maximum will be changed to Maximum period
     * @param maType {@link IIndicators.MaType type} of moving average
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] mavp(Instrument instrument, Period period, OfferSide side1, AppliedPrice appliedPrice1, OfferSide side2, AppliedPrice appliedPrice2, int minPeriod, int maxPeriod, MaType maType, long from, long to) throws JFException;
    
    /**
     * Calculates the Moving average with variable period indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side1 Bid or Ask side of the bar for the first input parameter
     * @param appliedPrice1 {@link IIndicators.AppliedPrice type} of input data for the first input parameter
     * @param side2 Bid or Ask side of the bar for the second input parameter
     * @param appliedPrice2 {@link IIndicators.AppliedPrice type} of input data for the second input parameter
     * @param minPeriod value less than minimum will be changed to Minimum period
     * @param maxPeriod value higher than maximum will be changed to Maximum period
     * @param maType {@link IIndicators.MaType type} of moving average
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] mavp(Instrument instrument, Period period, OfferSide side1, AppliedPrice appliedPrice1, OfferSide side2, AppliedPrice appliedPrice2, int minPeriod, int maxPeriod, MaType maType, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Highest value over a specified period for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double max(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Highest value over a specified period for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] max(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;

    /**
     * Calculates the Highest value over a specified period for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] max(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;
    
    /**
     * Calculates the Highest value over a specified period for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] max(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, long from, long to) throws JFException;

//    public int maxIndex(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;
//    public int[] maxIndex(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Median Price for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double medPrice(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Median Price for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] medPrice(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Median Price for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] medPrice(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Median Price for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] medPrice(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Money Flow Index for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double mfi(Instrument instrument, Period period, OfferSide side, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Money Flow Index for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] mfi(Instrument instrument, Period period, OfferSide side, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Money Flow Index for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] mfi(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Money Flow Index for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] mfi(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the MidPoint over period for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double midPoint(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the MidPoint over period for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] midPoint(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the MidPoint over period for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] midPoint(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the MidPoint over period for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] midPoint(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Midpoint Price over period for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double midPrice(Instrument instrument, Period period, OfferSide side, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Midpoint Price over period for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] midPrice(Instrument instrument, Period period, OfferSide side, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Midpoint Price over period for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] midPrice(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Midpoint Price over period for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] midPrice(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the lowest value over a specified period for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double min(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the lowest value over a specified period for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] min(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the lowest value over a specified period for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] min(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the lowest value over a specified period for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] min(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, long from, long to) throws JFException;

//    public int minIndex(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;
//    public int[] minIndex(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the lowest and the highest values over a specified period for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#MinMax>MinMax indicator</a>
     */
    public double[] minMax(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the lowest and the highest values over a specified period for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] minMax(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the lowest and the highest values over a specified period for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] minMax(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the lowest and the highest values over a specified period for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] minMax(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, long from, long to) throws JFException;

//    public int[] minMaxIndex(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;
//
//    public int[][] minMaxIndex(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Minus Directional Indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double minusDi(Instrument instrument, Period period, OfferSide side, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Minus Directional Indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] minusDi(Instrument instrument, Period period, OfferSide side, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Minus Directional Indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] minusDi(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Minus Directional Indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] minusDi(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Minus Directional Movement indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double minusDm(Instrument instrument, Period period, OfferSide side, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Minus Directional Movement indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] minusDm(Instrument instrument, Period period, OfferSide side, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Minus Directional Movement indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] minusDm(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Minus Directional Movement indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] minusDm(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Momentum indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double mom(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Momentum indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] mom(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Momentum indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] mom(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Momentum indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] mom(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Vector Arithmetic Mult for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side1 Bid or Ask side of the bar for the first input parameter
     * @param appliedPrice1 {@link IIndicators.AppliedPrice type} of input data for the first input parameter
     * @param side2 Bid or Ask side of the bar for the second input parameter
     * @param appliedPrice2 {@link IIndicators.AppliedPrice type} of input data for the second input parameter
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double mult(Instrument instrument, Period period, OfferSide side1, AppliedPrice appliedPrice1, OfferSide side2, AppliedPrice appliedPrice2, int shift) throws JFException;

    /**
     * Calculates the Vector Arithmetic Mult for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side1 Bid or Ask side of the bar for the first input parameter
     * @param appliedPrice1 {@link IIndicators.AppliedPrice type} of input data for the first input parameter
     * @param side2 Bid or Ask side of the bar for the second input parameter
     * @param appliedPrice2 {@link IIndicators.AppliedPrice type} of input data for the second input parameter
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] mult(Instrument instrument, Period period, OfferSide side1, AppliedPrice appliedPrice1, OfferSide side2, AppliedPrice appliedPrice2, long from, long to) throws JFException;

    /**
     * Calculates the Vector Arithmetic Mult for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side1 Bid or Ask side of the bar for the first input parameter
     * @param appliedPrice1 {@link IIndicators.AppliedPrice type} of input data for the first input parameter
     * @param side2 Bid or Ask side of the bar for the second input parameter
     * @param appliedPrice2 {@link IIndicators.AppliedPrice type} of input data for the second input parameter
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] mult(Instrument instrument, Period period, OfferSide side1, AppliedPrice appliedPrice1, OfferSide side2, AppliedPrice appliedPrice2, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Vector Arithmetic Mult for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side1 Bid or Ask side of the bar for the first input parameter
     * @param appliedPrice1 {@link IIndicators.AppliedPrice type} of input data for the first input parameter
     * @param side2 Bid or Ask side of the bar for the second input parameter
     * @param appliedPrice2 {@link IIndicators.AppliedPrice type} of input data for the second input parameter
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] mult(Instrument instrument, Period period, OfferSide side1, AppliedPrice appliedPrice1, OfferSide side2,
            AppliedPrice appliedPrice2, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Murrey Channels indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param nPeriod value form 0 to 9 that describes the period used in the indicator. Periods are as follows: 
     * <code>ONE_MIN, FIVE_MINS, TEN_MINS, FIFTEEN_MINS, THIRTY_MINS, ONE_HOUR, FOUR_HOURS, DAILY, WEEKLY, MONTHLY</code>   
     * @param timePeriod time period
     * @param stepBack step back
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] murrey(Instrument instrument, Period period, OfferSide side, int nPeriod, int timePeriod, int stepBack, int shift) throws JFException;

    /**
     * Calculates the Murrey Channels indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param nPeriod value form 0 to 9 that describes the period used in the indicator. Periods are as follows: 
     * <code>ONE_MIN, FIVE_MINS, TEN_MINS, FIFTEEN_MINS, THIRTY_MINS, ONE_HOUR, FOUR_HOURS, DAILY, WEEKLY, MONTHLY</code>   
     * @param timePeriod time period
     * @param stepBack step back
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] murrey(Instrument instrument, Period period, OfferSide side, int nPeriod, int timePeriod, int stepBack, long from, long to) throws JFException;

    /**
     * Calculates the Murrey Channels indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param nPeriod value form 0 to 9 that describes the period used in the indicator. Periods are as follows: 
     * <code>ONE_MIN, FIVE_MINS, TEN_MINS, FIFTEEN_MINS, THIRTY_MINS, ONE_HOUR, FOUR_HOURS, DAILY, WEEKLY, MONTHLY</code>   
     * @param timePeriod time period
     * @param stepBack step back
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] murrey(Instrument instrument, Period period, OfferSide side, int nPeriod, int timePeriod, int stepBack, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Murrey Channels indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param nPeriod value form 0 to 9 that describes the period used in the indicator. Periods are as follows: 
     * <code>ONE_MIN, FIVE_MINS, TEN_MINS, FIFTEEN_MINS, THIRTY_MINS, ONE_HOUR, FOUR_HOURS, DAILY, WEEKLY, MONTHLY</code>   
     * @param timePeriod time period
     * @param stepBack step back
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] murrey(Instrument instrument, Period period, OfferSide side, int nPeriod, int timePeriod, int stepBack, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Normalized Average True Range indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double natr(Instrument instrument, Period period, OfferSide side, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Normalized Average True Range indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] natr(Instrument instrument, Period period, OfferSide side, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Normalized Average True Range indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] natr(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Normalized Average True Range indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] natr(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the On Balance Volume for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param sideForPriceV Bid or Ask side for price volume
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double obv(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, OfferSide sideForPriceV, int shift) throws JFException;

    /**
     * Calculates the On Balance Volume for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param sideForPriceV Bid or Ask side for price volume
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] obv(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, OfferSide sideForPriceV, long from, long to) throws JFException;

    /**
     * Calculates the On Balance Volume for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param sideForPriceV Bid or Ask side for price volume
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] obv(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, OfferSide sideForPriceV, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the On Balance Volume for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param sideForPriceV Bid or Ask side for price volume
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] obv(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, OfferSide sideForPriceV, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Moving Average of Oscillator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param fast_ema_period period for fast EMA
     * @param slow_ema_period period for slow EMA
     * @param signal_period signal period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double osma(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int fast_ema_period, int slow_ema_period, int signal_period, int shift) throws JFException;

    /**
     * Calculates the Moving Average of Oscillator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param fast_ema_period period for fast EMA
     * @param slow_ema_period period for slow EMA
     * @param signal_period signal period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] osma(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int fast_ema_period, int slow_ema_period, int signal_period, long from, long to) throws JFException;

    /**
     * Calculates the Moving Average of Oscillator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param fast_ema_period period for fast EMA
     * @param slow_ema_period period for slow EMA
     * @param signal_period signal period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] osma(Instrument instrument, Period period, OfferSide side, int fast_ema_period, int slow_ema_period, int signal_period, AppliedPrice appliedPrice, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Moving Average of Oscillator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param fast_ema_period period for fast EMA
     * @param slow_ema_period period for slow EMA
     * @param signal_period signal period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] osma(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int fast_ema_period, int slow_ema_period, int signal_period, Filter filter, long from, long to) throws JFException;
    
    /**
     * @deprecated replaced by {@link #pivot(Instrument instrument, Period period, OfferSide side, int timePeriod, int shift)}
     */
    public double[] pivot(Instrument instrument, Period period, OfferSide side, int timePeriod, boolean showHistoricalLevels, int shift) throws JFException;

    /**
     * @deprecated replaced by {@link #pivot(Instrument instrument, Period period, OfferSide side, int timePeriod, long from, long to)}
     */
    public double[][] pivot(Instrument instrument, Period period, OfferSide side, int timePeriod, boolean showHistoricalLevels, long from, long to) throws JFException;

    /**
     * @deprecated replaced by {@link #pivot(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter)}
     */
    public double[][] pivot(Instrument instrument, Period period, OfferSide side, int timePeriod, boolean showHistoricalLevels, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * @deprecated replaced by {@link #pivot(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, long from, long to)}
     */
    public double[][] pivot(Instrument instrument, Period period, OfferSide side, int timePeriod, boolean showHistoricalLevels, Filter filter, long from, long to) throws JFException;
 
    /**
     * Calculates the Pivot points indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod  value form 0 to 9 that describes the period used in the indicator. Periods are as follows: 
     * <code>ONE_MIN, FIVE_MINS, TEN_MINS, FIFTEEN_MINS, THIRTY_MINS, ONE_HOUR, FOUR_HOURS, DAILY, WEEKLY, MONTHLY</code>
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] pivot(Instrument instrument, Period period, OfferSide side, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Pivot points indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod  value form 0 to 9 that describes the period used in the indicator. Periods are as follows: 
     * <code>ONE_MIN, FIVE_MINS, TEN_MINS, FIFTEEN_MINS, THIRTY_MINS, ONE_HOUR, FOUR_HOURS, DAILY, WEEKLY, MONTHLY</code>
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] pivot(Instrument instrument, Period period, OfferSide side, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Pivot points indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod  value form 0 to 9 that describes the period used in the indicator. Periods are as follows: 
     * <code>ONE_MIN, FIVE_MINS, TEN_MINS, FIFTEEN_MINS, THIRTY_MINS, ONE_HOUR, FOUR_HOURS, DAILY, WEEKLY, MONTHLY</code>
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] pivot(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Pivot points indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod  value form 0 to 9 that describes the period used in the indicator. Periods are as follows: 
     * <code>ONE_MIN, FIVE_MINS, TEN_MINS, FIFTEEN_MINS, THIRTY_MINS, ONE_HOUR, FOUR_HOURS, DAILY, WEEKLY, MONTHLY</code>
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] pivot(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Plus Directional Indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double plusDi(Instrument instrument, Period period, OfferSide side, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Plus Directional Indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] plusDi(Instrument instrument, Period period, OfferSide side, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Plus Directional Indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] plusDi(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Plus Directional Indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] plusDi(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Plus Directional Movement indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double plusDm(Instrument instrument, Period period, OfferSide side, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Plus Directional Movement indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] plusDm(Instrument instrument, Period period, OfferSide side, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Plus Directional Movement indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] plusDm(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Plus Directional Movement indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] plusDm(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Percentage Price Oscillator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param fastPeriod period for fast MA
     * @param slowPeriod period for slow MA
     * @param maType {@link IIndicators.MaType type} of moving average
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double ppo(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int fastPeriod, int slowPeriod, MaType maType, int shift) throws JFException;

    /**
     * Calculates the Percentage Price Oscillator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param fastPeriod period for fast MA
     * @param slowPeriod period for slow MA
     * @param maType {@link IIndicators.MaType type} of moving average
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] ppo(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int fastPeriod, int slowPeriod, MaType maType, long from, long to) throws JFException;

    /**
     * Calculates the Percentage Price Oscillator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param fastPeriod period for fast MA
     * @param slowPeriod period for slow MA
     * @param maType {@link IIndicators.MaType type} of moving average
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] ppo(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int fastPeriod, int slowPeriod, MaType maType, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Percentage Price Oscillator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param fastPeriod period for fast MA
     * @param slowPeriod period for slow MA
     * @param maType {@link IIndicators.MaType type} of moving average
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] ppo(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int fastPeriod, int slowPeriod, MaType maType, Filter filter, long from, long to) throws JFException;

    /**
     * @deprecated replaced by {@link #prchannel(Instrument instrument, Period period, OfferSide side, int timePeriod, int shift)} 
     * 
     */     
    public double prchannel(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int fastPeriod, int slowPeriod, MaType maType, int shift) throws JFException;

    /**
    * @deprecated replaced by {@link #prchannel(Instrument instrument, Period period, OfferSide side, int timePeriod, long from, long to)} 
    * 
    */
    public double[] prchannel(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int fastPeriod, int slowPeriod, MaType maType, long from, long to) throws JFException;

    /**
    * @deprecated replaced by {@link #prchannel(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter)} 
    * 
    */
    public double[] prchannel(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int fastPeriod, int slowPeriod, MaType maType, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Price Channel indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double prchannel(Instrument instrument, Period period, OfferSide side, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Price Channel indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] prchannel(Instrument instrument, Period period, OfferSide side, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Price Channel indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] prchannel(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Price Channel indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] prchannel(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, long from, long to) throws JFException;
    
    /**
     * Calculates the Rank Correlation Index for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double rci(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Rank Correlation Index for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] rci(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Rank Correlation Index for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] rci(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Rank Correlation Index for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] rci(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, long from, long to) throws JFException;
    
    /**
     * Calculates the Relative Momentum Index for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param momentumPeriod momentum period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double rmi(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int momentumPeriod, int shift) throws JFException;

    /**
     * Calculates the Relative Momentum Index for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param momentumPeriod momentum period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] rmi(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int momentumPeriod, long from, long to) throws JFException;

    /**
     * Calculates the Relative Momentum Index for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param momentumPeriod momentum period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] rmi(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int momentumPeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Relative Momentum Index for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param momentumPeriod momentum period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] rmi(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int momentumPeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Rate of change indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double roc(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Rate of change indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] roc(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Rate of change indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] roc(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Rate of change indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] roc(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Rate of change Percentage indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double rocp(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Rate of change Percentage indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] rocp(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Rate of change Percentage indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] rocp(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Rate of change Percentage indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] rocp(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Rate of change ratio: (price/prevPrice) for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double rocr(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Rate of change ratio: (price/prevPrice) for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] rocr(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Rate of change ratio: (price/prevPrice) for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] rocr(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Rate of change ratio: (price/prevPrice) for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] rocr(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Rate of change ratio 100 scale indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double rocr100(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Rate of change ratio 100 scale indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] rocr100(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Rate of change ratio 100 scale indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] rocr100(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Rate of change ratio 100 scale indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] rocr100(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Relative Strength Index for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double rsi(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Relative Strength Index for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] rsi(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Relative Strength Index for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] rsi(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Relative Strength Index for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] rsi(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Relative Vigor Index for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] rvi(Instrument instrument, Period period, OfferSide side, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Relative Vigor Index for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] rvi(Instrument instrument, Period period, OfferSide side, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Relative Vigor Index for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] rvi(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Relative Vigor Index for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] rvi(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Parabolic SAR indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param acceleration Acceleration Factor used up to the Maximum value
     * @param maximum Acceleration Factor Maximum value
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double sar(Instrument instrument, Period period, OfferSide side, double acceleration, double maximum, int shift) throws JFException;

    /**
     * Calculates the Parabolic SAR indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param acceleration Acceleration Factor used up to the Maximum value
     * @param maximum Acceleration Factor Maximum value
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] sar(Instrument instrument, Period period, OfferSide side, double acceleration, double maximum, long from, long to) throws JFException;

    /**
     * Calculates the Parabolic SAR indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param acceleration Acceleration Factor used up to the Maximum value
     * @param maximum Acceleration Factor Maximum value
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] sar(Instrument instrument, Period period, OfferSide side, double acceleration, double maximum, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Parabolic SAR - Extended indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param startValue Start value and direction. 0 for Auto, >0 for Long, <0 for Short
     * @param offsetOnReverse Percent offset added/removed to initial stop on short/long reversal
     * @param accelerationInitLong Acceleration Factor initial value for the Long direction
     * @param accelerationLong Acceleration Factor for the Long direction
     * @param accelerationMaxLong Acceleration Factor maximum value for the Long direction
     * @param accelerationInitShort Acceleration Factor initial value for the Short direction
     * @param accelerationShort Acceleration Factor for the Short direction
     * @param accelerationMaxShort Acceleration Factor maximum value for the Short direction
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * <p>
     * Note! function returns negative values to show that position is short
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>     
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double sarExt(Instrument instrument, Period period, OfferSide side, double startValue, double offsetOnReverse, double accelerationInitLong, double accelerationLong, double accelerationMaxLong, double accelerationInitShort, double accelerationShort, double accelerationMaxShort, int shift) throws JFException;

    /**
     * Calculates the Parabolic SAR - Extended indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @param startValue Start value and direction. 0 for Auto, >0 for Long, <0 for Short
     * @param offsetOnReverse Percent offset added/removed to initial stop on short/long reversal
     * @param accelerationInitLong Acceleration Factor initial value for the Long direction
     * @param accelerationLong Acceleration Factor for the Long direction
     * @param accelerationMaxLong Acceleration Factor maximum value for the Long direction
     * @param accelerationInitShort Acceleration Factor initial value for the Short direction
     * @param accelerationShort Acceleration Factor for the Short direction
     * @param accelerationMaxShort Acceleration Factor maximum value for the Short direction
     * @return values for the specified bars
     * <p>
     * Note! function returns negative values to show that position is short
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] sarExt(Instrument instrument, Period period, OfferSide side, double startValue, double offsetOnReverse, double accelerationInitLong, double accelerationLong, double accelerationMaxLong, double accelerationInitShort, double accelerationShort, double accelerationMaxShort, long from, long to) throws JFException;

    /**
     * Calculates the Parabolic SAR - Extended indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param startValue Start value and direction. 0 for Auto, >0 for Long, <0 for Short
     * @param offsetOnReverse Percent offset added/removed to initial stop on short/long reversal
     * @param accelerationInitLong Acceleration Factor initial value for the Long direction
     * @param accelerationLong Acceleration Factor for the Long direction
     * @param accelerationMaxLong Acceleration Factor maximum value for the Long direction
     * @param accelerationInitShort Acceleration Factor initial value for the Short direction
     * @param accelerationShort Acceleration Factor for the Short direction
     * @param accelerationMaxShort Acceleration Factor maximum value for the Short direction
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] sarExt(Instrument instrument, Period period, OfferSide side, double startValue, double offsetOnReverse, double accelerationInitLong, double accelerationLong, double accelerationMaxLong, double accelerationInitShort, double accelerationShort, double accelerationMaxShort, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;

    /**
     * Calculates the Vector Trigonometric Sin for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar 
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double sin(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int shift) throws JFException;

    /**
     * Calculates the Vector Trigonometric Sin for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] sin(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, long from, long to) throws JFException;

    /**
     * Calculates the Vector Trigonometric Sin for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] sin(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Vector Trigonometric Sin for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] sin(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, long from, long to)throws JFException;

    /**
     * Calculates the Vector Trigonometric Sinh for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double sinh(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int shift) throws JFException;

    /**
     * Calculates the Vector Trigonometric Sinh for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] sinh(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, long from, long to) throws JFException;

    /**
     * Calculates the Vector Trigonometric Sinh for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] sinh(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Vector Trigonometric Sinh for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] sinh(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Simple Moving Average for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double sma(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Simple Moving Average for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] sma(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Simple Moving Average for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] sma(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Simple Moving Average for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] sma(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, long from, long to) throws JFException;
    
    /**
     * Calculates the Stochastic Momentum Index for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param fastKPeriod fast K period
     * @param slowKPeriod slow K period
     * @param slowDPeriod slow D period
     * @param smoothingPeriod smoothing period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] smi(Instrument instrument, Period period, OfferSide side, int fastKPeriod, int slowKPeriod, int slowDPeriod, int smoothingPeriod, int shift) throws JFException;

    /**
     * Calculates the Stochastic Momentum Index for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param fastKPeriod fast K period
     * @param slowKPeriod slow K period
     * @param slowDPeriod slow D period
     * @param smoothingPeriod smoothing period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] smi(Instrument instrument, Period period, OfferSide side, int fastKPeriod, int slowKPeriod, int slowDPeriod, int smoothingPeriod, long from, long to) throws JFException;

    /**
     * Calculates the Stochastic Momentum Index for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param fastKPeriod fast K period
     * @param slowKPeriod slow K period
     * @param slowDPeriod slow D period
     * @param smoothingPeriod smoothing period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] smi(Instrument instrument, Period period, OfferSide side, int fastKPeriod, int slowKPeriod, int slowDPeriod, int smoothingPeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Stochastic Momentum Index for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param fastKPeriod fast K period
     * @param slowKPeriod slow K period
     * @param slowDPeriod slow D period
     * @param smoothingPeriod smoothing period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] smi(Instrument instrument, Period period, OfferSide side, int fastKPeriod, int slowKPeriod, int slowDPeriod, int smoothingPeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Smoothed Moving Average indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double smma(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Smoothed Moving Average for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] smma(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Smoothed Moving Average for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] smma(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Smoothed Moving Average for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] smma(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Vector Square Root for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double sqrt(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int shift) throws JFException;

    /**
     * Calculates the Vector Square Root for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] sqrt(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, long from, long to) throws JFException;

    /**
     * Calculates the Vector Square Root for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] sqrt(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Vector Square Root for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     *
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] sqrt(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Standard Deviation for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param nbDev number of deviations
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Standard_Deviation>Standard Deviation</a>
     */
    public double stdDev(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, double nbDev, int shift) throws JFException;

    /**
     * Calculates the Standard Deviation for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param nbDev number of deviations
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Standard_Deviation>Standard Deviation</a>
     */
    public double[] stdDev(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, double nbDev, long from, long to) throws JFException;

    /**
     * Calculates the Standard Deviation for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param nbDev number of deviations
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Standard_Deviation>Standard Deviation</a>
     */
    public double[] stdDev(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, double nbDev, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Standard Deviation for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param nbDev number of deviations
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Standard_Deviation>Standard Deviation</a>
     */
    public double[] stdDev(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, double nbDev, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Stochastic indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param fastKPeriod time period for building the Fast-K line
     * @param slowKPeriod smoothing for making the Slow-K line. Usually set to 3
     * @param slowKMaType {@link IIndicators.MaType type} of moving average for Slow-K
     * @param slowDPeriod smoothing for making the Slow-D line
     * @param slowDMaType {@link IIndicators.MaType type} of moving average for Slow-D
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Stochastic>Stochastic indicator</a>
     */
    public double[] stoch(Instrument instrument, Period period, OfferSide side, int fastKPeriod, int slowKPeriod, MaType slowKMaType, int slowDPeriod, MaType slowDMaType, int shift) throws JFException;

    /**
     * Calculates the Stochastic indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param fastKPeriod time period for building the Fast-K line
     * @param slowKPeriod smoothing for making the Slow-K line. Usually set to 3
     * @param slowKMaType {@link IIndicators.MaType type} of moving average for Slow-K
     * @param slowDPeriod smoothing for making the Slow-D line
     * @param slowDMaType {@link IIndicators.MaType type} of moving average for Slow-D
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Stochastic>Stochastic indicator</a>
     */
    public double[][] stoch(Instrument instrument, Period period, OfferSide side, int fastKPeriod, int slowKPeriod, MaType slowKMaType, int slowDPeriod, MaType slowDMaType, long from, long to) throws JFException;

    /**
     * Calculates the Stochastic indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param fastKPeriod time period for building the Fast-K line
     * @param slowKPeriod smoothing for making the Slow-K line. Usually set to 3
     * @param slowKMaType {@link IIndicators.MaType type} of moving average for Slow-K
     * @param slowDPeriod smoothing for making the Slow-D line
     * @param slowDMaType {@link IIndicators.MaType type} of moving average for Slow-D
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Stochastic>Stochastic indicator</a>
     */
    public double[][] stoch(Instrument instrument, Period period, OfferSide side, int fastKPeriod, int slowKPeriod, MaType slowKMaType, int slowDPeriod, MaType slowDMaType, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Stochastic indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param fastKPeriod time period for building the Fast-K line
     * @param slowKPeriod smoothing for making the Slow-K line. Usually set to 3
     * @param slowKMaType {@link IIndicators.MaType type} of moving average for Slow-K
     * @param slowDPeriod smoothing for making the Slow-D line
     * @param slowDMaType {@link IIndicators.MaType type} of moving average for Slow-D
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Indicator_catalog#Stochastic>Stochastic indicator</a>
     */
    public double[][] stoch(Instrument instrument, Period period, OfferSide side, int fastKPeriod, int slowKPeriod, MaType slowKMaType, int slowDPeriod, MaType slowDMaType, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Stochastic Fast indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param fastKPeriod time period for building the Fast-K line
     * @param fastDPeriod smoothing for making the Fast-D line. Usually set to 3
     * @param fastDMaType  {@link IIndicators.MaType type} of moving average for Fast-D
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] stochF(Instrument instrument, Period period, OfferSide side, int fastKPeriod, int fastDPeriod, MaType fastDMaType, int shift) throws JFException;

    /**
     * Calculates the Stochastic Fast indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param fastKPeriod time period for building the Fast-K line
     * @param fastDPeriod smoothing for making the Fast-D line. Usually set to 3
     * @param fastDMaType  {@link IIndicators.MaType type} of moving average for Fast-D
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] stochF(Instrument instrument, Period period, OfferSide side, int fastKPeriod, int fastDPeriod, MaType fastDMaType, long from, long to) throws JFException;

    /**
     * Calculates the Stochastic Fast indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param fastKPeriod time period for building the Fast-K line
     * @param fastDPeriod smoothing for making the Fast-D line. Usually set to 3
     * @param fastDMaType  {@link IIndicators.MaType type} of moving average for Fast-D
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] stochF(Instrument instrument, Period period, OfferSide side, int fastKPeriod, int fastDPeriod, MaType fastDMaType, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Stochastic Fast indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param fastKPeriod time period for building the Fast-K line
     * @param fastDPeriod smoothing for making the Fast-D line. Usually set to 3
     * @param fastDMaType  {@link IIndicators.MaType type} of moving average for Fast-D
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] stochF(Instrument instrument, Period period, OfferSide side, int fastKPeriod, int fastDPeriod, MaType fastDMaType, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Stochastic Relative Strength Index for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param fastKPeriod time period for building the Fast-K line
     * @param fastDPeriod smoothing for making the Fast-D line. Usually set to 3
     * @param fastDMaType {@link IIndicators.MaType type} of moving average for Fast-D
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] stochRsi(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int fastKPeriod, int fastDPeriod, MaType fastDMaType, int shift) throws JFException;

    /**
     * Calculates the Stochastic Relative Strength Index for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param fastKPeriod time period for building the Fast-K line
     * @param fastDPeriod smoothing for making the Fast-D line. Usually set to 3
     * @param fastDMaType {@link IIndicators.MaType type} of moving average for Fast-D
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] stochRsi(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int fastKPeriod, int fastDPeriod, MaType fastDMaType, long from, long to) throws JFException;

    /**
     * Calculates the Stochastic Relative Strength Index for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param fastKPeriod time period for building the Fast-K line
     * @param fastDPeriod smoothing for making the Fast-D line. Usually set to 3
     * @param fastDMaType {@link IIndicators.MaType type} of moving average for Fast-D
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] stochRsi(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int fastKPeriod, int fastDPeriod, MaType fastDMaType, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Stochastic Relative Strength Index for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param fastKPeriod time period for building the Fast-K line
     * @param fastDPeriod smoothing for making the Fast-D line. Usually set to 3
     * @param fastDMaType {@link IIndicators.MaType type} of moving average for Fast-D
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] stochRsi(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int fastKPeriod, int fastDPeriod, MaType fastDMaType, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Vector Arithmetic Substraction for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param side1 Bid or Ask side of the bar for the first input parameter
     * @param appliedPrice1 {@link IIndicators.AppliedPrice type} of input data for the first input parameter
     * @param side2 Bid or Ask side of the bar for the second input parameter
     * @param appliedPrice2 {@link IIndicators.AppliedPrice type} of input data for the second input parameter
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double sub(Instrument instrument, Period period, OfferSide side1, AppliedPrice appliedPrice1, OfferSide side2, AppliedPrice appliedPrice2, int shift) throws JFException;

    /**
     * Calculates the Vector Arithmetic Substraction for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side1 Bid or Ask side of the bar for the first input parameter
     * @param appliedPrice1 {@link IIndicators.AppliedPrice type} of input data for the first input parameter
     * @param side2 Bid or Ask side of the bar for the second input parameter
     * @param appliedPrice2 {@link IIndicators.AppliedPrice type} of input data for the second input parameter
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] sub(Instrument instrument, Period period, OfferSide side1, AppliedPrice appliedPrice1, OfferSide side2, AppliedPrice appliedPrice2, long from, long to) throws JFException;

    /**
     * Calculates the Vector Arithmetic Substraction for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side1 Bid or Ask side of the bar for the first input parameter
     * @param appliedPrice1 {@link IIndicators.AppliedPrice type} of input data for the first input parameter
     * @param side2 Bid or Ask side of the bar for the second input parameter
     * @param appliedPrice2 {@link IIndicators.AppliedPrice type} of input data for the second input parameter
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] sub(Instrument instrument, Period period, OfferSide side1, AppliedPrice appliedPrice1, OfferSide side2, AppliedPrice appliedPrice2, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Vector Arithmetic Substraction for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side1 Bid or Ask side of the bar for the first input parameter
     * @param appliedPrice1 {@link IIndicators.AppliedPrice type} of input data for the first input parameter
     * @param side2 Bid or Ask side of the bar for the second input parameter
     * @param appliedPrice2 {@link IIndicators.AppliedPrice type} of input data for the second input parameter
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] sub(Instrument instrument, Period period, OfferSide side1, AppliedPrice appliedPrice1, OfferSide side2, AppliedPrice appliedPrice2, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Summation for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double sum(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Summation for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] sum(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Summation for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] sum(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Summation for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] sum(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Support and Resistance indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] supportResistance(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Support and Resistance indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] supportResistance(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Support and Resistance indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] supportResistance(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Support and Resistance indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] supportResistance(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Triple Exponential Moving Average for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param vFactor volume Factor
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double t3(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, double vFactor, int shift) throws JFException;

    /**
     * Calculates the Triple Exponential Moving Average for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param vFactor volume Factor
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] t3(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, double vFactor, long from, long to) throws JFException;

    /**
     * Calculates the Triple Exponential Moving Average for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param vFactor volume Factor
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] t3(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, double vFactor, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Triple Exponential Moving Average for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param vFactor volume Factor
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] t3(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, double vFactor, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Vector Trigonometric Tan for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double tan(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int shift) throws JFException;

    /**
     * Calculates the Vector Trigonometric Tan for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] tan(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, long from, long to) throws JFException;

    /**
     * Calculates the Vector Trigonometric Tan for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] tan(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Vector Trigonometric Tan for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] tan(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Vector Trigonometric Tanh for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double tanh(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int shift) throws JFException;

    /**
     * Calculates the Vector Trigonometric Tanh for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] tanh(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, long from, long to) throws JFException;

    /**
     * Calculates the Vector Trigonometric Tanh for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] tanh(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Vector Trigonometric Tanh for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] tanh(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Thrust Bar indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] tbp(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int shift) throws JFException;

    /**
     * Calculates the Thrust Outside Bar indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] tbop(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int shift) throws JFException;

    /**
     * Calculates the Tom DeMark Indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] td_i(Instrument instrument, Period period, OfferSide side, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Tom DeMark Indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] td_i(Instrument instrument, Period period, OfferSide side, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Tom DeMark Indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] td_i(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Tom DeMark Indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] td_i(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the TD Sequential indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[] td_s(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the TD Sequential indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[][] td_s(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the TD Sequential indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[][] td_s(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the TD Sequential indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public int[][] td_s(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Triple Exponential Moving Average indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double tema(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Triple Exponential Moving Average indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] tema(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Triple Exponential Moving Average indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] tema(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Triple Exponential Moving Average indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] tema(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the True Range indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double trange(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the True Range indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] trange(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the True Range indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] trange(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the True Range indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] trange(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Trend Envelope indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param deviation deviation
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] trendEnv(Instrument instrument, Period period, OfferSide side, int timePeriod, double deviation, int shift) throws JFException;

    /**
     * Calculates the Trend Envelope indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param deviation deviation
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] trendEnv(Instrument instrument, Period period, OfferSide side, int timePeriod,  double deviation, long from, long to) throws JFException;

    /**
     * Calculates the Trend Envelope indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param deviation deviation
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] trendEnv(Instrument instrument, Period period, OfferSide side, int timePeriod,  double deviation, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Trend Envelope indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param deviation deviation
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] trendEnv(Instrument instrument, Period period, OfferSide side, int timePeriod, double deviation, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Triangular Moving Average indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double trima(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Triangular Moving Average indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] trima(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Triangular Moving Average indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] trima(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Triangular Moving Average indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] trima(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the 1-day Rate-Of-Change (ROC) of a Triple Smooth EMA indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double trix(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the 1-day Rate-Of-Change (ROC) of a Triple Smooth EMA indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] trix(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the 1-day Rate-Of-Change (ROC) of a Triple Smooth EMA indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] trix(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the 1-day Rate-Of-Change (ROC) of a Triple Smooth EMA indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] trix(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Time Series Forecast indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double tsf(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Time Series Forecast indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] tsf(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Time Series Forecast indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] tsf(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Time Series Forecast indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] tsf(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Time Segmented Volume for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double tvs(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Time Segmented Volume for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] tvs(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Time Segmented Volume for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] tvs(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Time Segmented Volume for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] tvs(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Typical Price for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double typPrice(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Typical Price for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] typPrice(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Typical Price for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] typPrice(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Typical Price for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] typPrice(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Ultimate Oscillator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod1 number of bars for 1st period
     * @param timePeriod2 number of bars fro 2nd period
     * @param timePeriod3 number of bars for 3rd period 
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double ultOsc(Instrument instrument, Period period, OfferSide side, int timePeriod1, int timePeriod2, int timePeriod3, int shift) throws JFException;

    /**
     * Calculates the Ultimate Oscillator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod1 number of bars for 1st period
     * @param timePeriod2 number of bars fro 2nd period
     * @param timePeriod3 number of bars for 3rd period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] ultOsc(Instrument instrument, Period period, OfferSide side, int timePeriod1, int timePeriod2, int timePeriod3, long from, long to) throws JFException;

    /**
     * Calculates the Ultimate Oscillator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod1 number of bars for 1st period
     * @param timePeriod2 number of bars fro 2nd period
     * @param timePeriod3 number of bars for 3rd period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] ultOsc(Instrument instrument, Period period, OfferSide side, int timePeriod1, int timePeriod2, int timePeriod3, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Ultimate Oscillator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod1 number of bars for 1st period
     * @param timePeriod2 number of bars fro 2nd period
     * @param timePeriod3 number of bars for 3rd period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] ultOsc(Instrument instrument, Period period, OfferSide side, int timePeriod1, int timePeriod2, int timePeriod3, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Variance indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param nbDev number of deviations
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double var(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, double nbDev, int shift) throws JFException;

    /**
     * Calculates the Variance indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param nbDev number of deviations
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] var(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, double nbDev, long from, long to) throws JFException;

    /**
     * Calculates the Variance indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param nbDev number of deviations
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] var(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, double nbDev, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Variance indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param nbDev number of deviations
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] var(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, double nbDev, Filter filter, long from, long to) throws JFException;
    
    /**
     * Calculates volume for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double volume(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates volume for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] volume(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates volume for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] volume(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates volume for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] volume(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;
    
    /**
     * Calculates the Volume Weighted Average Price for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double volumeWAP(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Volume Weighted Average Price for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] volumeWAP(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Volume Weighted Average Price for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] volumeWAP(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Volume Weighted Average Price for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] volumeWAP(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Waddah Attar Trend indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double waddahAttar(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Waddah Attar Trend indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] waddahAttar(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Waddah Attar Trend indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] waddahAttar(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    	
    /**
     * Calculates the Waddah Attar Trend indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] waddahAttar(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Weighted Close Price indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double wclPrice(Instrument instrument, Period period, OfferSide side, int shift) throws JFException;

    /**
     * Calculates the Weighted Close Price indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] wclPrice(Instrument instrument, Period period, OfferSide side, long from, long to) throws JFException;

    /**
     * Calculates the Weighted Close Price indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] wclPrice(Instrument instrument, Period period, OfferSide side, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Weighted Close Price indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] wclPrice(Instrument instrument, Period period, OfferSide side, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Williams' %R indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double willr(Instrument instrument, Period period, OfferSide side, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Williams' %R indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] willr(Instrument instrument, Period period, OfferSide side, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Williams' %R indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] willr(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Williams' %R indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] willr(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Weighted Moving Average indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double wma(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Weighted Moving Average for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] wma(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Weighted Moving Average for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] wma(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Weighted Moving Average for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param appliedPrice {@link IIndicators.AppliedPrice type} of input data
     * @param timePeriod time period
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] wma(Instrument instrument, Period period, OfferSide side, AppliedPrice appliedPrice, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the Woodie Pivot indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod value form 0 to 9 that describes the period used in the indicator. Periods are as follows: 
     * <code>ONE_MIN, FIVE_MINS, TEN_MINS, FIFTEEN_MINS, THIRTY_MINS, ONE_HOUR, FOUR_HOURS, DAILY, WEEKLY, MONTHLY</code> 
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] woodPivot(Instrument instrument, Period period, OfferSide side, int timePeriod, int shift) throws JFException;

    /**
     * Calculates the Woodie Pivot indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod value form 0 to 9 that describes the period used in the indicator. Periods are as follows: 
     * <code>ONE_MIN, FIVE_MINS, TEN_MINS, FIFTEEN_MINS, THIRTY_MINS, ONE_HOUR, FOUR_HOURS, DAILY, WEEKLY, MONTHLY</code>
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] woodPivot(Instrument instrument, Period period, OfferSide side, int timePeriod, long from, long to) throws JFException;

    /**
     * Calculates the Woodie Pivot indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod value form 0 to 9 that describes the period used in the indicator. Periods are as follows: 
     * <code>ONE_MIN, FIVE_MINS, TEN_MINS, FIFTEEN_MINS, THIRTY_MINS, ONE_HOUR, FOUR_HOURS, DAILY, WEEKLY, MONTHLY</code>
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] woodPivot(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the Woodie Pivot indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param timePeriod value form 0 to 9 that describes the period used in the indicator. Periods are as follows: 
     * <code>ONE_MIN, FIVE_MINS, TEN_MINS, FIFTEEN_MINS, THIRTY_MINS, ONE_HOUR, FOUR_HOURS, DAILY, WEEKLY, MONTHLY</code>
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[][] woodPivot(Instrument instrument, Period period, OfferSide side, int timePeriod, Filter filter, long from, long to) throws JFException;

    /**
     * Calculates the ZigZag indicator for a bar specified with the <code>shift</code> parameter.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param extDepth depth
     * @param extDeviation deviation
     * @param extBackstep backstep
     * @param shift number of candles back in time staring from current bar. 0 - current bar (currently generated from ticks),
     *          1 - previous bar (last formed bar), 2 - current bar minus 2 bars and so on
     * @return value for the specified bar
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double zigzag(Instrument instrument, Period period, OfferSide side, int extDepth, int extDeviation, int extBackstep, int shift) throws JFException;

    /**
     * Calculates the ZigZag indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param extDepth depth
     * @param extDeviation deviation
     * @param extBackstep backstep
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] zigzag(Instrument instrument, Period period, OfferSide side, int extDepth, int extDeviation, int extBackstep, long from, long to) throws JFException;

    /**
     * Calculates the ZigZag indicator for bars specified with <code>numberOfCandlesBefore</code>, <code>time</code> and <code>numberOfCandlesAfter</code> parameters.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param extDepth depth
     * @param extDeviation deviation
     * @param extBackstep backstep
     * @param filter {@link Filter filter}
     * @param numberOfCandlesBefore how much candles to load before and including the candle with time specified in the <code>time</code> parameter
     * @param time time of the last candle in the period specified with the <code>numberOfCandlesBefore</code> parameter or/and
     *        time of the candle prior to the first candle in the period specified with the <code>numberOfCandlesAfter</code> parameter
     * @param numberOfCandlesAfter how much candles to load after (and not including) the candle with time specified in the <code>time</code> parameter
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] zigzag(Instrument instrument, Period period, OfferSide side, int extDepth, int extDeviation, int extBackstep, Filter filter, int numberOfCandlesBefore, long time, int numberOfCandlesAfter) throws JFException;
    
    /**
     * Calculates the ZigZag indicator for ticks or bars in the specified period. For ticks bars with 1 second period are calculated first
     * using the side specified in the <code>side</code> parameter, resulting data is calculated from these bars. 
     * The resulting array for ticks is an array of values for 1 second bars.
     * 
     * @param instrument instrument of the bar
     * @param period period of the bar
     * @param side Bid or Ask side of the bar
     * @param extDepth depth
     * @param extDeviation deviation
     * @param extBackstep backstep
     * @param filter {@link Filter filter}
     * @param from start of the time interval for which bars or ticks should be loaded. The value must be equal to the exact starting time of the bar for
     * the specified period. Method {@link IHistory#getBarStart(Period, long)} returns the starting time of the bar that includes
     * the specified time
     * @param to end time of the time interval for which bars or ticks should be loaded. 
     * This is the starting time of the last bar/tick that should be loaded
     * @return values for the specified bars 
     * @throws JFException when parameters are not valid
     * @see <a href = http://www.dukascopy.com/wiki/index.php?title=Strategy_API:_Indicators#Indicator_Calculation>Indicator calculation</a>
     */
    public double[] zigzag(Instrument instrument, Period period, OfferSide side, int extDepth, int extDeviation, int extBackstep, Filter filter, long from, long to) throws JFException;
}
